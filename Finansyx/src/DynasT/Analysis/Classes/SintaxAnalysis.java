
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 07 20:18:40 CST 2013
//----------------------------------------------------

package DynasT.Analysis.Classes;

import java_cup.runtime.*;
import finansyx.commons.*;
import finansyx.commons.CashFlow.*;
import finansyx.commons.Manage.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 07 20:18:40 CST 2013
  */
public class SintaxAnalysis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxAnalysis() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxAnalysis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxAnalysis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\006\000\002\043" +
    "\003\000\002\043\003\000\002\042\003\000\002\042\003" +
    "\000\002\003\005\000\002\004\005\000\002\015\005\000" +
    "\002\017\004\000\002\016\004\000\002\016\003\000\002" +
    "\020\004\000\002\020\005\000\002\026\003\000\002\026" +
    "\010\000\002\026\003\000\002\026\003\000\002\027\003" +
    "\000\002\027\004\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\036\007\000\002\036\007\000\002\036" +
    "\005\000\002\035\012\000\002\035\012\000\002\034\006" +
    "\000\002\030\005\000\002\030\003\000\002\025\007\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\031\005\000\002\021\007\000\002\032" +
    "\004\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\032\004\000\002\032\004\000\002\022\004\000" +
    "\002\022\004\000\002\022\006\000\002\023\004\000\002" +
    "\023\004\000\002\024\004\000\002\024\005\000\002\024" +
    "\004\000\002\037\005\000\002\040\005\000\002\005\004" +
    "\000\002\005\003\000\002\014\005\000\002\041\006\000" +
    "\002\006\005\000\002\007\004\000\002\010\004\000\002" +
    "\010\003\000\002\012\004\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\003\000\002\011\005" +
    "\000\002\011\003\000\002\013\006\000\002\013\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\032\005\001\002\000\004\047\015\001" +
    "\002\000\004\052\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\013\011\001\002\000" +
    "\004\047\ufffb\001\002\000\004\014\261\001\002\000\004" +
    "\035\034\001\002\000\004\052\021\001\002\000\004\053" +
    "\016\001\002\000\004\013\017\001\002\000\004\052\uffc9" +
    "\001\002\000\006\014\uffc7\052\021\001\002\000\004\011" +
    "\024\001\002\000\004\014\023\001\002\000\004\035\uffca" +
    "\001\002\000\004\053\026\001\002\000\006\014\uffc6\052" +
    "\uffc6\001\002\000\004\015\027\001\002\000\004\053\030" +
    "\001\002\000\004\020\031\001\002\000\006\014\uffc5\052" +
    "\uffc5\001\002\000\004\014\uffc8\001\002\000\020\022\224" +
    "\023\233\030\235\036\226\042\227\056\225\057\230\001" +
    "\002\000\004\013\223\001\002\000\004\034\037\001\002" +
    "\000\010\026\043\041\045\052\044\001\002\000\004\013" +
    "\041\001\002\000\004\014\ufffa\001\002\000\010\026\ufff8" +
    "\041\ufff8\052\ufff8\001\002\000\006\016\054\021\053\001" +
    "\002\000\006\016\ufff0\021\ufff0\001\002\000\006\016\ufff3" +
    "\021\ufff3\001\002\000\006\016\ufff1\021\ufff1\001\002\000" +
    "\012\014\051\026\043\041\045\052\044\001\002\000\014" +
    "\014\ufff6\020\050\026\ufff6\041\ufff6\052\ufff6\001\002\000" +
    "\014\014\ufff5\020\ufff5\026\ufff5\041\ufff5\052\ufff5\001\002" +
    "\000\004\014\ufff9\001\002\000\014\014\ufff7\020\050\026" +
    "\ufff7\041\ufff7\052\ufff7\001\002\000\036\004\103\024\110" +
    "\026\106\027\107\033\066\037\072\040\064\041\074\043" +
    "\073\045\070\046\111\050\101\051\076\052\067\001\002" +
    "\000\006\054\055\055\057\001\002\000\010\015\uffff\017" +
    "\uffff\020\uffff\001\002\000\004\015\060\001\002\000\010" +
    "\015\ufffe\017\ufffe\020\ufffe\001\002\000\006\054\055\055" +
    "\057\001\002\000\004\017\062\001\002\000\006\016\ufff2" +
    "\021\ufff2\001\002\000\022\005\uffea\010\uffea\012\uffea\014" +
    "\uffea\020\uffea\026\uffea\041\uffea\052\uffea\001\002\000\010" +
    "\004\113\016\115\051\114\001\002\000\022\005\uffef\010" +
    "\uffef\012\uffef\014\uffef\020\uffef\026\uffef\041\uffef\052\uffef" +
    "\001\002\000\004\051\213\001\002\000\004\010\211\001" +
    "\002\000\010\004\113\016\115\051\114\001\002\000\024" +
    "\005\uffec\010\uffec\012\uffec\014\uffec\015\204\020\uffec\026" +
    "\uffec\041\uffec\052\uffec\001\002\000\010\004\113\016\115" +
    "\051\114\001\002\000\010\004\113\016\115\051\114\001" +
    "\002\000\004\010\200\001\002\000\026\005\uffe8\006\170" +
    "\007\171\010\uffe8\012\uffe8\014\uffe8\020\uffe8\026\uffe8\041" +
    "\uffe8\052\uffe8\001\002\000\022\005\uffe9\010\uffe9\012\uffe9" +
    "\014\uffe9\020\uffe9\026\uffe9\041\uffe9\052\uffe9\001\002\000" +
    "\016\010\153\014\ufff4\020\ufff4\026\ufff4\041\ufff4\052\ufff4" +
    "\001\002\000\024\005\uffe0\010\uffe0\012\uffe0\014\uffe0\015" +
    "\uffe0\020\uffe0\026\uffe0\041\uffe0\052\uffe0\001\002\000\004" +
    "\051\165\001\002\000\026\005\uffed\006\160\007\162\010" +
    "\uffed\012\uffed\014\uffed\020\uffed\026\uffed\041\uffed\052\uffed" +
    "\001\002\000\036\004\103\024\110\026\106\027\107\033" +
    "\066\037\072\040\064\041\074\043\073\045\070\046\111" +
    "\050\101\051\076\052\067\001\002\000\004\005\150\001" +
    "\002\000\022\005\uffeb\010\uffeb\012\uffeb\014\uffeb\020\uffeb" +
    "\026\uffeb\041\uffeb\052\uffeb\001\002\000\004\010\146\001" +
    "\002\000\004\004\137\001\002\000\004\051\130\001\002" +
    "\000\010\004\113\016\115\051\114\001\002\000\006\005" +
    "\125\015\124\001\002\000\010\004\113\016\115\051\114" +
    "\001\002\000\006\015\120\017\121\001\002\000\006\016" +
    "\115\051\114\001\002\000\026\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\012\uffd6\014\uffd6\020\uffd6\026\uffd6\041\uffd6\052" +
    "\uffd6\001\002\000\006\005\uffcd\015\uffcd\001\002\000\006" +
    "\016\115\051\114\001\002\000\006\005\uffcb\015\uffcb\001" +
    "\002\000\006\005\uffcc\015\uffcc\001\002\000\026\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\012\uffd2\014\uffd2\020\uffd2\026" +
    "\uffd2\041\uffd2\052\uffd2\001\002\000\004\051\126\001\002" +
    "\000\026\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1\014" +
    "\uffd1\020\uffd1\026\uffd1\041\uffd1\052\uffd1\001\002\000\004" +
    "\005\127\001\002\000\026\005\uffd0\006\uffd0\007\uffd0\010" +
    "\uffd0\012\uffd0\014\uffd0\020\uffd0\026\uffd0\041\uffd0\052\uffd0" +
    "\001\002\000\004\015\131\001\002\000\004\051\132\001" +
    "\002\000\004\015\133\001\002\000\004\051\134\001\002" +
    "\000\004\015\135\001\002\000\004\053\136\001\002\000" +
    "\022\005\uffe3\010\uffe3\012\uffe3\014\uffe3\020\uffe3\026\uffe3" +
    "\041\uffe3\052\uffe3\001\002\000\004\053\140\001\002\000" +
    "\004\015\142\001\002\000\004\005\uffda\001\002\000\004" +
    "\051\143\001\002\000\004\015\144\001\002\000\004\051" +
    "\145\001\002\000\004\005\uffd9\001\002\000\004\053\147" +
    "\001\002\000\022\005\uffdb\010\uffdb\012\uffdb\014\uffdb\020" +
    "\uffdb\026\uffdb\041\uffdb\052\uffdb\001\002\000\022\005\uffee" +
    "\010\uffee\012\uffee\014\uffee\020\uffee\026\uffee\041\uffee\052" +
    "\uffee\001\002\000\010\005\152\010\153\012\154\001\002" +
    "\000\026\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\014" +
    "\uffe5\020\uffe5\026\uffe5\041\uffe5\052\uffe5\001\002\000\004" +
    "\053\157\001\002\000\004\051\155\001\002\000\004\005" +
    "\156\001\002\000\024\005\uffdf\010\uffdf\012\uffdf\014\uffdf" +
    "\015\uffdf\020\uffdf\026\uffdf\041\uffdf\052\uffdf\001\002\000" +
    "\022\005\uffdd\010\uffdd\012\uffdd\014\uffdd\020\uffdd\026\uffdd" +
    "\041\uffdd\052\uffdd\001\002\000\004\053\164\001\002\000" +
    "\026\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\014\uffd8" +
    "\020\uffd8\026\uffd8\041\uffd8\052\uffd8\001\002\000\004\053" +
    "\163\001\002\000\026\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\012\uffce\014\uffce\020\uffce\026\uffce\041\uffce\052\uffce\001" +
    "\002\000\026\005\uffcf\006\uffcf\007\uffcf\010\uffcf\012\uffcf" +
    "\014\uffcf\020\uffcf\026\uffcf\041\uffcf\052\uffcf\001\002\000" +
    "\004\015\166\001\002\000\004\053\167\001\002\000\022" +
    "\005\uffe2\010\uffe2\012\uffe2\014\uffe2\020\uffe2\026\uffe2\041" +
    "\uffe2\052\uffe2\001\002\000\004\004\175\001\002\000\004" +
    "\004\172\001\002\000\036\004\103\024\110\026\106\027" +
    "\107\033\066\037\072\040\064\041\074\043\073\045\070" +
    "\046\111\050\101\051\076\052\067\001\002\000\006\005" +
    "\174\010\153\001\002\000\026\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\012\uffe6\014\uffe6\020\uffe6\026\uffe6\041\uffe6\052" +
    "\uffe6\001\002\000\036\004\103\024\110\026\106\027\107" +
    "\033\066\037\072\040\064\041\074\043\073\045\070\046" +
    "\111\050\101\051\076\052\067\001\002\000\006\005\177" +
    "\010\153\001\002\000\026\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\012\uffe7\014\uffe7\020\uffe7\026\uffe7\041\uffe7\052\uffe7" +
    "\001\002\000\004\053\201\001\002\000\022\005\uffdc\010" +
    "\uffdc\012\uffdc\014\uffdc\020\uffdc\026\uffdc\041\uffdc\052\uffdc" +
    "\001\002\000\026\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012" +
    "\uffd3\014\uffd3\020\uffd3\026\uffd3\041\uffd3\052\uffd3\001\002" +
    "\000\026\005\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\014" +
    "\uffd5\020\uffd5\026\uffd5\041\uffd5\052\uffd5\001\002\000\004" +
    "\004\206\001\002\000\024\005\uffe1\010\uffe1\012\uffe1\014" +
    "\uffe1\015\uffe1\020\uffe1\026\uffe1\041\uffe1\052\uffe1\001\002" +
    "\000\036\004\103\024\110\026\106\027\107\033\066\037" +
    "\072\040\064\041\074\043\073\045\070\046\111\050\101" +
    "\051\076\052\067\001\002\000\006\010\153\012\154\001" +
    "\002\000\026\005\uffd7\006\uffd7\007\uffd7\010\uffd7\012\uffd7" +
    "\014\uffd7\020\uffd7\026\uffd7\041\uffd7\052\uffd7\001\002\000" +
    "\004\053\212\001\002\000\022\005\uffde\010\uffde\012\uffde" +
    "\014\uffde\020\uffde\026\uffde\041\uffde\052\uffde\001\002\000" +
    "\004\015\214\001\002\000\004\051\215\001\002\000\004" +
    "\015\216\001\002\000\004\051\217\001\002\000\004\015" +
    "\220\001\002\000\004\053\221\001\002\000\022\005\uffe4" +
    "\010\uffe4\012\uffe4\014\uffe4\020\uffe4\026\uffe4\041\uffe4\052" +
    "\uffe4\001\002\000\026\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\012\uffd4\014\uffd4\020\uffd4\026\uffd4\041\uffd4\052\uffd4\001" +
    "\002\000\020\022\uffc3\023\uffc3\030\uffc3\036\uffc3\042\uffc3" +
    "\056\uffc3\057\uffc3\001\002\000\004\021\257\001\002\000" +
    "\004\020\ufffd\001\002\000\004\021\255\001\002\000\004" +
    "\021\253\001\002\000\004\020\ufffc\001\002\000\022\014" +
    "\uffc1\022\224\023\233\030\235\036\226\042\227\056\225" +
    "\057\230\001\002\000\004\020\uffbc\001\002\000\006\026" +
    "\244\041\245\001\002\000\004\014\243\001\002\000\004" +
    "\021\241\001\002\000\004\020\uffba\001\002\000\004\020" +
    "\240\001\002\000\022\014\uffc0\022\uffc0\023\uffc0\030\uffc0" +
    "\036\uffc0\042\uffc0\056\uffc0\057\uffc0\001\002\000\004\051" +
    "\242\001\002\000\004\020\uffbd\001\002\000\004\034\uffc4" +
    "\001\002\000\004\021\250\001\002\000\004\021\246\001" +
    "\002\000\004\051\247\001\002\000\004\020\uffb9\001\002" +
    "\000\004\051\251\001\002\000\004\020\uffb8\001\002\000" +
    "\004\014\uffc2\001\002\000\006\054\055\055\057\001\002" +
    "\000\004\020\uffbe\001\002\000\004\051\256\001\002\000" +
    "\004\020\uffbf\001\002\000\004\051\260\001\002\000\004" +
    "\020\uffbb\001\002\000\004\020\262\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\006\002\005\003\003\001\001\000\010\004" +
    "\011\037\012\040\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\034\007\032\001\001" +
    "\000\006\005\021\014\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\031\014\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\233\011\236\012\230" +
    "\013\235\042\231\001\001\000\002\001\001\000\006\015" +
    "\037\017\035\001\001\000\010\016\045\020\046\026\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\051\026\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\025\077\027\076\030\070\031\103\032" +
    "\101\033\064\034\104\035\062\036\074\001\001\000\004" +
    "\043\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\221\024" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\207\024\111\001\001\000\002\001" +
    "\001\000\006\022\202\024\111\001\001\000\006\022\201" +
    "\024\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\160\001\001\000\024\025\077\027" +
    "\150\030\070\031\103\032\101\033\064\034\104\035\062" +
    "\036\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\115\024\111\001\001\000\002\001\001\000\006\022" +
    "\122\024\111\001\001\000\002\001\001\000\004\024\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\025\077\027\172\030\070\031\103\032\101\033" +
    "\064\034\104\035\062\036\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\025\077\027\175\030\070\031" +
    "\103\032\101\033\064\034\104\035\062\036\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\204\001\001\000\002\001\001\000\024\025\077\027" +
    "\206\030\070\031\103\032\101\033\064\034\104\035\062" +
    "\036\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\251\011\236\012\230\013\235\042\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxAnalysis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxAnalysis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxAnalysis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxAnalysis$actions {



    public CashFlow flujo = new CashFlow();
    MARRManager marr = new MARRManager();
    String inflacion = "0%";

  private final SintaxAnalysis parser;

  /** Constructor */
  CUP$SintaxAnalysis$actions(SintaxAnalysis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxAnalysis$do_action(
    int                        CUP$SintaxAnalysis$act_num,
    java_cup.runtime.lr_parser CUP$SintaxAnalysis$parser,
    java.util.Stack            CUP$SintaxAnalysis$stack,
    int                        CUP$SintaxAnalysis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxAnalysis$result;

      /* select the action based on the action number */
      switch (CUP$SintaxAnalysis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LAST_INFO ::= LAST COSTS EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setLasYearCosts(n); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LAST_INFO",9, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LAST_INFO ::= LAST REVENUE EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setLastYearRevenue(n);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LAST_INFO",9, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INFO_OPTION ::= LAST_INFO 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INFO_OPTION ::= ASSETS EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setAssets(n);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INFO_OPTION ::= TYPE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setType(t);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INFO_OPTION ::= START EQUALS NUMBER 
            {
              Object RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double N = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setStart(N.intValue()); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INFO_OPTION ::= PATENT EQUALS BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setCommerce(b); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INFO_OPTION ::= FIRST EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setInvestment(n); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INFO_LINE ::= INFO_OPTION SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_LINE",8, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INFO_BODY ::= INFO_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_BODY",6, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INFO_BODY ::= INFO_LINE INFO_BODY 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_BODY",6, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INFO_HEADER ::= INFO OPCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_HEADER",5, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INFO_PART ::= INFO_HEADER INFO_BODY CLCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_PART",4, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MARR_PARAM ::= PERCENTAGE COMMA PERCENTAGE SEMICOLON 
            {
              MARRStructure RESULT =null;
		int riskleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).left;
		int riskright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).right;
		String risk = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).value;
		int percentageleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int percentageright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		String percentage = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		 
   RESULT = new MARRStructure(percentage, inflacion, risk);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_PARAM",31, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MARR_LINE ::= IDENTIFIER POINTER MARR_PARAM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		MARRStructure m = (MARRStructure)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 marr.addInvestor(i,m);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_LINE",10, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MARR_BODY ::= MARR_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_BODY",3, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MARR_BODY ::= MARR_LINE MARR_BODY 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_BODY",3, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MARR_HEADER ::= MARR PERCENTAGE OPCURLYBRAC 
            {
              MARRManager RESULT =null;
		int percentageleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int percentageright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		String percentage = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
    RESULT = new MARRManager(percentage);
    inflacion = percentage;
    marr = RESULT;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_HEADER",30, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MARR_PART ::= MARR_HEADER MARR_BODY CLCURLYBRAC 
            {
              MARRManager RESULT =null;
		
 flujo.setMarr(marr);
 System.out.println("tmar= " + marr.getMarr());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_PART",29, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NUM_LIST ::= NUMBER CLSQBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("NUM_LIST",18, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NUM_LIST ::= NUMBER COMMA NUM_LIST 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("NUM_LIST",18, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NUM_LIST ::= OPSQBRAC NUM_LIST 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("NUM_LIST",18, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INCREASE ::= MINUS PERCENTAGE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INCREASE",17, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INCREASE ::= PLUS PERCENTAGE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INCREASE",17, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // P_OPTIONS ::= NUM_LIST COMMA NUMBER CLBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("P_OPTIONS",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // P_OPTIONS ::= NUM_LIST CLBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("P_OPTIONS",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // P_OPTIONS ::= OPBRAC P_OPTIONS 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("P_OPTIONS",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PROGNOSTICS ::= PROGNOSTIC P_OPTIONS 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PROGNOSTICS ::= INFMIN P_OPTIONS 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PROGNOSTICS ::= INF P_OPTIONS 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PROGNOSTICS ::= UPPER_MIN P_OPTIONS 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PROGNOSTICS ::= UPPER P_OPTIONS 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PROGNOSTICS ::= PROGNOSTICS INCREASE 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STAIR_OPTIONS ::= PERCENTAGE COMMA NUMBER COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("STAIR_OPTIONS",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STAIR ::= TIERED OPBRAC STAIR_OPTIONS 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("STAIR",23, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PERCENT ::= COSTS TIMES PERCENTAGE 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PERCENT",25, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PERCENT ::= REVENUE TIMES PERCENTAGE 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PERCENT",25, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PERCENT ::= INSTRUCTION TIMES PERCENTAGE 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PERCENT",25, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PERCENT ::= IDENTIFIER TIMES PERCENTAGE 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PERCENT",25, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LIMIT_PART ::= OPBRAC INSTRUCTION POLKADOT NUMBER CLBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LIMIT_PART",19, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LIMIT ::= LIMIT_PART 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LIMIT",22, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LIMIT ::= LIMIT COMMA LIMIT_PART 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LIMIT",22, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEPRECIATION ::= DEPRECIATE NUMBER COMMA PERCENTAGE 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("DEPRECIATION",26, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INTERESTS ::= GERMAN NUMBER COMMA NUMBER COMMA NUMBER COMMA PERCENTAGE 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INTERESTS",27, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INTERESTS ::= FRENCH NUMBER COMMA NUMBER COMMA NUMBER COMMA PERCENTAGE 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INTERESTS",27, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERATE ::= OPBRAC INSTRUCTION CLBRAC 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPERATE",28, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERATE ::= OPERATE MINUS OPBRAC INSTRUCTION CLBRAC 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPERATE",28, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERATE ::= OPERATE PLUS OPBRAC INSTRUCTION CLBRAC 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPERATE",28, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCTION ::= OPERATE 
            {
              FinancialDataManager RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager op = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = op; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCTION ::= NUMBER 
            {
              FinancialDataManager RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = new FlatValuesManager(num, 10);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCTION ::= INTERESTS 
            {
              FinancialDataManager RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager in = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = in; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCTION ::= DEPRECIATION 
            {
              FinancialDataManager RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager d = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = d; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCTION ::= LIMIT 
            {
              FinancialDataManager RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager l = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = l; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCTION ::= PROGNOSTICS 
            {
              FinancialDataManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager p = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = p; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCTION ::= STAIR CLBRAC 
            {
              FinancialDataManager RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		FinancialDataManager s = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		 RESULT = s; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTION ::= PERCENT 
            {
              FinancialDataManager RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager I = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT= I; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",21, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ID_PART ::= COSTS 
            {
              FinancialDataManager RESULT =null;
		
            RESULT = new FinancialDataManager();
            RESULT.setName("costos");
        
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("ID_PART",20, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ID_PART ::= REVENUE 
            {
              FinancialDataManager RESULT =null;
		
            RESULT = new FinancialDataManager();
            RESULT.setName("ingresos");
        
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("ID_PART",20, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ID_PART ::= ID_PART OPSQBRAC BOOL COMMA BOOL CLSQBRAC 
            {
              FinancialDataManager RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)).right;
		FinancialDataManager I = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).right;
		Boolean fa = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).value;
		int shleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int shright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Boolean sh = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
            RESULT = new FinancialDataManager();
            RESULT.setName(I.getName());
            RESULT.setHasBill(fa);
            RESULT.setIsShield(sh);
        
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("ID_PART",20, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ID_PART ::= IDENTIFIER 
            {
              FinancialDataManager RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
            RESULT = new FinancialDataManager();
            RESULT.setName(n);
        
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("ID_PART",20, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COSTS_LINE ::= ID_PART EQUALS INSTRUCTION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager in = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
                in.setHasBill(i.hasBill());
                in.setIsShield(i.isShield());
                flujo.AddOutlay(i.getName(), in);
              
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_LINE",14, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // COSTS_LINE ::= COSTS_LINE SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_LINE",14, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COSTS_BODY ::= COSTS_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_BODY",12, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COSTS_BODY ::= COSTS_BODY COSTS_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_BODY",12, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COSTS_HEAD ::= OUTLAY OPCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_HEAD",13, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COSTS_PART ::= COSTS_HEAD COSTS_BODY CLCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_PART",11, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_PART ::= MARR_PART INFO_PART COSTS_PART 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BODY_PART",2, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // HEADER_PART ::= FLOW IDENTIFIER OPCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("HEADER_PART",1, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TYPE ::= NET 
            {
              Integer RESULT =null;
		RESULT = CashFlow.NET;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("TYPE",32, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TYPE ::= GROSS 
            {
              Integer RESULT =null;
		RESULT = CashFlow.GROSS; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("TYPE",32, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BOOL ::= NO 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BOOL",33, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BOOL ::= YES 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BOOL",33, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // FILE ::= HEADER_PART BODY_PART CLCURLYBRAC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("FILE",0, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= FILE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		RESULT = start_val;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxAnalysis$parser.done_parsing();
          return CUP$SintaxAnalysis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

