
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 07 23:26:49 CST 2013
//----------------------------------------------------

package DynasT.Analysis.Classes;

import finansyx.commons.*;
import finansyx.commons.CashFlow.*;
import finansyx.commons.Manage.*;
import finansyx.commons.Prognostication.ModelManager;
import finansyx.commons.Rules.Options;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 07 23:26:49 CST 2013
  */
public class SintaxAnalysis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxAnalysis() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxAnalysis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxAnalysis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\006\000\002\042" +
    "\003\000\002\042\003\000\002\041\003\000\002\041\003" +
    "\000\002\003\005\000\002\004\005\000\002\015\005\000" +
    "\002\017\004\000\002\016\004\000\002\016\003\000\002" +
    "\020\004\000\002\020\005\000\002\021\003\000\002\021" +
    "\010\000\002\021\003\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\027\007\000\002\027\007\000\002\027" +
    "\005\000\002\026\012\000\002\026\012\000\002\025\006" +
    "\000\002\031\005\000\002\031\003\000\002\030\007\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\023\010\000\002\032\004\000\002\032" +
    "\004\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\032\004\000\002\032\004\000\002\035\003\000" +
    "\002\035\005\000\002\034\004\000\002\034\004\000\002" +
    "\033\004\000\002\033\005\000\002\033\004\000\002\036" +
    "\005\000\002\037\005\000\002\005\004\000\002\005\003" +
    "\000\002\014\005\000\002\040\006\000\002\006\005\000" +
    "\002\007\004\000\002\010\004\000\002\010\003\000\002" +
    "\012\004\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\011\005\000\002\011\003" +
    "\000\002\013\006\000\002\013\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\004\032\005\001\002\000\004\050\015\001" +
    "\002\000\004\053\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\013\011\001\002\000" +
    "\004\050\ufffb\001\002\000\004\014\254\001\002\000\004" +
    "\035\034\001\002\000\004\053\021\001\002\000\004\054" +
    "\016\001\002\000\004\013\017\001\002\000\004\053\uffca" +
    "\001\002\000\006\014\uffc8\053\021\001\002\000\004\011" +
    "\024\001\002\000\004\014\023\001\002\000\004\035\uffcb" +
    "\001\002\000\004\054\026\001\002\000\006\014\uffc7\053" +
    "\uffc7\001\002\000\004\015\027\001\002\000\004\054\030" +
    "\001\002\000\004\020\031\001\002\000\006\014\uffc6\053" +
    "\uffc6\001\002\000\004\014\uffc9\001\002\000\020\022\217" +
    "\023\226\030\227\036\221\042\222\057\220\060\223\001" +
    "\002\000\004\013\216\001\002\000\004\034\037\001\002" +
    "\000\010\026\043\041\045\053\044\001\002\000\004\013" +
    "\041\001\002\000\004\014\ufffa\001\002\000\010\026\ufff8" +
    "\041\ufff8\053\ufff8\001\002\000\006\016\054\021\053\001" +
    "\002\000\006\016\ufff0\021\ufff0\001\002\000\006\016\ufff3" +
    "\021\ufff3\001\002\000\006\016\ufff1\021\ufff1\001\002\000" +
    "\012\014\051\026\043\041\045\053\044\001\002\000\014" +
    "\014\ufff6\020\050\026\ufff6\041\ufff6\053\ufff6\001\002\000" +
    "\014\014\ufff5\020\ufff5\026\ufff5\041\ufff5\053\ufff5\001\002" +
    "\000\004\014\ufff9\001\002\000\014\014\ufff7\020\050\026" +
    "\ufff7\041\ufff7\053\ufff7\001\002\000\042\004\105\016\066" +
    "\024\112\026\110\027\111\033\067\037\074\040\064\041" +
    "\076\043\075\045\070\046\072\047\113\051\103\052\100" +
    "\053\071\001\002\000\006\055\055\056\057\001\002\000" +
    "\010\015\uffff\017\uffff\020\uffff\001\002\000\004\015\060" +
    "\001\002\000\010\015\ufffe\017\ufffe\020\ufffe\001\002\000" +
    "\006\055\055\056\057\001\002\000\004\017\062\001\002" +
    "\000\006\016\ufff2\021\ufff2\001\002\000\022\005\uffea\010" +
    "\uffea\012\uffea\014\uffea\020\uffea\026\uffea\041\uffea\053\uffea" +
    "\001\002\000\006\016\115\052\116\001\002\000\022\005" +
    "\uffef\010\uffef\012\uffef\014\uffef\020\uffef\026\uffef\041\uffef" +
    "\053\uffef\001\002\000\042\004\105\016\066\024\112\026" +
    "\110\027\111\033\067\037\074\040\064\041\076\043\075" +
    "\045\070\046\072\047\113\051\103\052\100\053\071\001" +
    "\002\000\004\052\202\001\002\000\006\016\115\052\116" +
    "\001\002\000\004\010\177\001\002\000\006\016\115\052" +
    "\116\001\002\000\024\005\uffec\010\uffec\012\uffec\014\uffec" +
    "\015\174\020\uffec\026\uffec\041\uffec\053\uffec\001\002\000" +
    "\006\016\115\052\116\001\002\000\006\016\115\052\116" +
    "\001\002\000\004\010\170\001\002\000\026\005\uffe8\006" +
    "\160\007\161\010\uffe8\012\uffe8\014\uffe8\020\uffe8\026\uffe8" +
    "\041\uffe8\053\uffe8\001\002\000\022\005\uffe9\010\uffe9\012" +
    "\uffe9\014\uffe9\020\uffe9\026\uffe9\041\uffe9\053\uffe9\001\002" +
    "\000\016\010\146\014\ufff4\020\ufff4\026\ufff4\041\ufff4\053" +
    "\ufff4\001\002\000\024\005\uffe0\010\uffe0\012\uffe0\014\uffe0" +
    "\015\uffe0\020\uffe0\026\uffe0\041\uffe0\053\uffe0\001\002\000" +
    "\004\052\155\001\002\000\026\005\uffed\006\150\007\151" +
    "\010\uffed\012\uffed\014\uffed\020\uffed\026\uffed\041\uffed\053" +
    "\uffed\001\002\000\042\004\105\016\066\024\112\026\110" +
    "\027\111\033\067\037\074\040\064\041\076\043\075\045" +
    "\070\046\072\047\113\051\103\052\100\053\071\001\002" +
    "\000\022\005\uffee\010\uffee\012\uffee\014\uffee\020\uffee\026" +
    "\uffee\041\uffee\053\uffee\001\002\000\022\005\uffeb\010\uffeb" +
    "\012\uffeb\014\uffeb\020\uffeb\026\uffeb\041\uffeb\053\uffeb\001" +
    "\002\000\004\010\142\001\002\000\004\054\135\001\002" +
    "\000\004\052\126\001\002\000\006\016\115\052\116\001" +
    "\002\000\030\005\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2" +
    "\014\uffd2\015\124\020\uffd2\026\uffd2\041\uffd2\053\uffd2\001" +
    "\002\000\006\016\115\052\116\001\002\000\006\015\120" +
    "\017\121\001\002\000\026\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\012\uffd7\014\uffd7\020\uffd7\026\uffd7\041\uffd7\053\uffd7" +
    "\001\002\000\006\016\115\052\116\001\002\000\030\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\012\uffcc\014\uffcc\015\uffcc" +
    "\020\uffcc\026\uffcc\041\uffcc\053\uffcc\001\002\000\030\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\012\uffcd\014\uffcd\015\uffcd" +
    "\020\uffcd\026\uffcd\041\uffcd\053\uffcd\001\002\000\030\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\012\uffce\014\uffce\015\uffce" +
    "\020\uffce\026\uffce\041\uffce\053\uffce\001\002\000\004\052" +
    "\125\001\002\000\026\005\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\012\uffd1\014\uffd1\020\uffd1\026\uffd1\041\uffd1\053\uffd1\001" +
    "\002\000\004\015\127\001\002\000\004\052\130\001\002" +
    "\000\004\015\131\001\002\000\004\052\132\001\002\000" +
    "\004\015\133\001\002\000\004\054\134\001\002\000\022" +
    "\005\uffe3\010\uffe3\012\uffe3\014\uffe3\020\uffe3\026\uffe3\041" +
    "\uffe3\053\uffe3\001\002\000\004\015\136\001\002\000\004" +
    "\052\137\001\002\000\004\015\140\001\002\000\004\052" +
    "\141\001\002\000\022\005\uffda\010\uffda\012\uffda\014\uffda" +
    "\020\uffda\026\uffda\041\uffda\053\uffda\001\002\000\004\054" +
    "\143\001\002\000\022\005\uffdb\010\uffdb\012\uffdb\014\uffdb" +
    "\020\uffdb\026\uffdb\041\uffdb\053\uffdb\001\002\000\006\005" +
    "\145\010\146\001\002\000\026\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\012\uffe5\014\uffe5\020\uffe5\026\uffe5\041\uffe5\053" +
    "\uffe5\001\002\000\004\054\147\001\002\000\022\005\uffdd" +
    "\010\uffdd\012\uffdd\014\uffdd\020\uffdd\026\uffdd\041\uffdd\053" +
    "\uffdd\001\002\000\004\054\154\001\002\000\004\054\153" +
    "\001\002\000\026\005\uffd9\006\uffd9\007\uffd9\010\uffd9\012" +
    "\uffd9\014\uffd9\020\uffd9\026\uffd9\041\uffd9\053\uffd9\001\002" +
    "\000\026\005\uffcf\006\uffcf\007\uffcf\010\uffcf\012\uffcf\014" +
    "\uffcf\020\uffcf\026\uffcf\041\uffcf\053\uffcf\001\002\000\026" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\014\uffd0\020" +
    "\uffd0\026\uffd0\041\uffd0\053\uffd0\001\002\000\004\015\156" +
    "\001\002\000\004\054\157\001\002\000\022\005\uffe2\010" +
    "\uffe2\012\uffe2\014\uffe2\020\uffe2\026\uffe2\041\uffe2\053\uffe2" +
    "\001\002\000\004\004\165\001\002\000\004\004\162\001" +
    "\002\000\042\004\105\016\066\024\112\026\110\027\111" +
    "\033\067\037\074\040\064\041\076\043\075\045\070\046" +
    "\072\047\113\051\103\052\100\053\071\001\002\000\006" +
    "\005\164\010\146\001\002\000\026\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\012\uffe6\014\uffe6\020\uffe6\026\uffe6\041\uffe6" +
    "\053\uffe6\001\002\000\042\004\105\016\066\024\112\026" +
    "\110\027\111\033\067\037\074\040\064\041\076\043\075" +
    "\045\070\046\072\047\113\051\103\052\100\053\071\001" +
    "\002\000\006\005\167\010\146\001\002\000\026\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\012\uffe7\014\uffe7\020\uffe7\026" +
    "\uffe7\041\uffe7\053\uffe7\001\002\000\004\054\171\001\002" +
    "\000\022\005\uffdc\010\uffdc\012\uffdc\014\uffdc\020\uffdc\026" +
    "\uffdc\041\uffdc\053\uffdc\001\002\000\026\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\012\uffd4\014\uffd4\020\uffd4\026\uffd4\041" +
    "\uffd4\053\uffd4\001\002\000\026\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\012\uffd6\014\uffd6\020\uffd6\026\uffd6\041\uffd6\053" +
    "\uffd6\001\002\000\004\016\066\001\002\000\024\005\uffe1" +
    "\010\uffe1\012\uffe1\014\uffe1\015\uffe1\020\uffe1\026\uffe1\041" +
    "\uffe1\053\uffe1\001\002\000\026\005\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\012\uffd8\014\uffd8\020\uffd8\026\uffd8\041\uffd8\053" +
    "\uffd8\001\002\000\004\054\200\001\002\000\022\005\uffde" +
    "\010\uffde\012\uffde\014\uffde\020\uffde\026\uffde\041\uffde\053" +
    "\uffde\001\002\000\026\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\012\uffd3\014\uffd3\020\uffd3\026\uffd3\041\uffd3\053\uffd3\001" +
    "\002\000\004\015\203\001\002\000\004\052\204\001\002" +
    "\000\004\015\205\001\002\000\004\052\206\001\002\000" +
    "\004\015\207\001\002\000\004\054\210\001\002\000\022" +
    "\005\uffe4\010\uffe4\012\uffe4\014\uffe4\020\uffe4\026\uffe4\041" +
    "\uffe4\053\uffe4\001\002\000\006\010\146\012\212\001\002" +
    "\000\004\052\213\001\002\000\004\017\214\001\002\000" +
    "\024\005\uffdf\010\uffdf\012\uffdf\014\uffdf\015\uffdf\020\uffdf" +
    "\026\uffdf\041\uffdf\053\uffdf\001\002\000\026\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\012\uffd5\014\uffd5\020\uffd5\026\uffd5" +
    "\041\uffd5\053\uffd5\001\002\000\020\022\uffc4\023\uffc4\030" +
    "\uffc4\036\uffc4\042\uffc4\057\uffc4\060\uffc4\001\002\000\004" +
    "\021\252\001\002\000\004\020\ufffd\001\002\000\004\021" +
    "\250\001\002\000\004\021\246\001\002\000\004\020\ufffc" +
    "\001\002\000\022\014\uffc2\022\217\023\226\030\227\036" +
    "\221\042\222\057\220\060\223\001\002\000\004\020\uffbd" +
    "\001\002\000\006\026\237\041\240\001\002\000\004\021" +
    "\235\001\002\000\004\014\234\001\002\000\004\020\uffbb" +
    "\001\002\000\004\020\233\001\002\000\022\014\uffc1\022" +
    "\uffc1\023\uffc1\030\uffc1\036\uffc1\042\uffc1\057\uffc1\060\uffc1" +
    "\001\002\000\004\034\uffc5\001\002\000\004\052\236\001" +
    "\002\000\004\020\uffbe\001\002\000\004\021\243\001\002" +
    "\000\004\021\241\001\002\000\004\052\242\001\002\000" +
    "\004\020\uffba\001\002\000\004\052\244\001\002\000\004" +
    "\020\uffb9\001\002\000\004\014\uffc3\001\002\000\006\055" +
    "\055\056\057\001\002\000\004\020\uffbf\001\002\000\004" +
    "\052\251\001\002\000\004\020\uffc0\001\002\000\004\052" +
    "\253\001\002\000\004\020\uffbc\001\002\000\004\020\255" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\006\002\005\003\003\001\001\000\010\004" +
    "\011\036\012\037\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\034\007\032\001\001" +
    "\000\006\005\021\014\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\031\014\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\227\011\231\012\223" +
    "\013\230\041\224\001\001\000\002\001\001\000\006\015" +
    "\037\017\035\001\001\000\010\016\045\020\046\021\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\051\021\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\022\100\023\105\024\064\025\106\026" +
    "\062\027\076\030\101\031\072\032\103\001\001\000\004" +
    "\042\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\113\035" +
    "\214\001\001\000\002\001\001\000\024\022\210\023\105" +
    "\024\064\025\106\026\062\027\076\030\101\031\072\032" +
    "\103\001\001\000\002\001\001\000\006\033\113\035\200" +
    "\001\001\000\002\001\001\000\006\033\113\035\175\001" +
    "\001\000\002\001\001\000\006\033\113\035\172\001\001" +
    "\000\006\033\113\035\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\151\001\001\000" +
    "\024\022\143\023\105\024\064\025\106\026\062\027\076" +
    "\030\101\031\072\032\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\113\035\116\001\001\000\002\001" +
    "\001\000\004\033\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\022" +
    "\162\023\105\024\064\025\106\026\062\027\076\030\101" +
    "\031\072\032\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\022\165\023\105\024\064\025\106\026\062" +
    "\027\076\030\101\031\072\032\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\244\011\231\012\223\013\230\041" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxAnalysis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxAnalysis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxAnalysis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxAnalysis$actions {



    public CashFlow flujo = new CashFlow();
    MARRManager marr = new MARRManager();
    String inflacion = "0%";

  private final SintaxAnalysis parser;

  /** Constructor */
  CUP$SintaxAnalysis$actions(SintaxAnalysis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxAnalysis$do_action(
    int                        CUP$SintaxAnalysis$act_num,
    java_cup.runtime.lr_parser CUP$SintaxAnalysis$parser,
    java.util.Stack            CUP$SintaxAnalysis$stack,
    int                        CUP$SintaxAnalysis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxAnalysis$result;

      /* select the action based on the action number */
      switch (CUP$SintaxAnalysis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LAST_INFO ::= LAST COSTS EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setLasYearCosts(n); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LAST_INFO",9, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LAST_INFO ::= LAST REVENUE EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setLastYearRevenue(n);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LAST_INFO",9, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INFO_OPTION ::= LAST_INFO 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INFO_OPTION ::= ASSETS EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setAssets(n);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INFO_OPTION ::= TYPE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setType(t);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INFO_OPTION ::= START EQUALS NUMBER 
            {
              Object RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double N = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setStart(N.intValue()); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INFO_OPTION ::= PATENT EQUALS BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setCommerce(b); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INFO_OPTION ::= FIRST EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setInvestment(n); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INFO_LINE ::= INFO_OPTION SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_LINE",8, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INFO_BODY ::= INFO_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_BODY",6, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INFO_BODY ::= INFO_LINE INFO_BODY 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_BODY",6, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INFO_HEADER ::= INFO OPCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_HEADER",5, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INFO_PART ::= INFO_HEADER INFO_BODY CLCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_PART",4, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MARR_PARAM ::= PERCENTAGE COMMA PERCENTAGE SEMICOLON 
            {
              MARRStructure RESULT =null;
		int riskleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).left;
		int riskright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).right;
		String risk = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).value;
		int percentageleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int percentageright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		String percentage = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		 
   RESULT = new MARRStructure(percentage, inflacion, risk);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_PARAM",30, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MARR_LINE ::= IDENTIFIER POINTER MARR_PARAM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		MARRStructure m = (MARRStructure)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 marr.addInvestor(i,m);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_LINE",10, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MARR_BODY ::= MARR_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_BODY",3, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MARR_BODY ::= MARR_LINE MARR_BODY 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_BODY",3, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MARR_HEADER ::= MARR PERCENTAGE OPCURLYBRAC 
            {
              MARRManager RESULT =null;
		int percentageleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int percentageright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		String percentage = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
    RESULT = new MARRManager(percentage);
    inflacion = percentage;
    marr = RESULT;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_HEADER",29, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MARR_PART ::= MARR_HEADER MARR_BODY CLCURLYBRAC 
            {
              MARRManager RESULT =null;
		
 flujo.setMarr(marr);
 System.out.println("tmar= " + marr.getMarr());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_PART",28, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NUM_LIST ::= NUMBER CLSQBRAC 
            {
              ArrayList<Double> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
    RESULT = new ArrayList<>();
    RESULT.add(n);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("NUM_LIST",25, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NUM_LIST ::= NUMBER COMMA NUM_LIST 
            {
              ArrayList<Double> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new ArrayList<>();
    RESULT.add(n);
    RESULT.addAll(li);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("NUM_LIST",25, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NUM_LIST ::= OPSQBRAC NUM_LIST 
            {
              ArrayList<Double> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = li;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("NUM_LIST",25, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INCREASE ::= MINUS PERCENTAGE 
            {
              Double RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		RESULT =-1 * Statistics.percentageFromString(pe);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INCREASE",26, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INCREASE ::= PLUS PERCENTAGE 
            {
              Double RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		RESULT = Statistics.percentageFromString(pe);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INCREASE",26, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // P_OPTIONS ::= NUM_LIST COMMA NUMBER 
            {
              ModelManager RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new ModelManager(li);
    RESULT.setFixedConfidence(n.intValue());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("P_OPTIONS",27, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // P_OPTIONS ::= NUM_LIST 
            {
              ModelManager RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new ModelManager(li);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("P_OPTIONS",27, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PROGNOSTICS ::= MINIMUM P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.MINIMUM,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PROGNOSTICS ::= PROGNOSTIC P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.PUNTUAL,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PROGNOSTICS ::= INFMIN P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.MINIMUM_LOWER,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PROGNOSTICS ::= INF P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.LOWER_LIMIT,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PROGNOSTICS ::= UPPER_MIN P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.MINIMUM_UPPER,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PROGNOSTICS ::= UPPER P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.UPPER_LIMIT,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PROGNOSTICS ::= PROGNOSTICS INCREASE 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		PrognosticManager p = (PrognosticManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double in = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(), p.getConfidence(), p.getOption(), in);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STAIR ::= TIERED PERCENTAGE COMMA NUMBER COMMA NUMBER 
            {
              FinancialDataManager RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new TieredValuesManager(pe, n.intValue(), flujo.getStart()+1, n2);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("STAIR",17, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PERCENT ::= COSTS TIMES PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PercentageManager(pe, flujo.getCosts());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PERCENT",18, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PERCENT ::= REVENUE TIMES PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PercentageManager(pe, flujo.getRevenue());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PERCENT",18, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PERCENT ::= INSTRUCTION TIMES PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		FinancialDataManager in = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PercentageManager(pe, in);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PERCENT",18, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PERCENT ::= IDENTIFIER TIMES PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PercentageManager(pe,flujo.getOutLay(i));

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PERCENT",18, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LIMIT_PART ::= OPSQBRAC INSTRUCTION POLKADOT NUMBER CLSQBRAC 
            {
              FinancialDataManager RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).right;
		FinancialDataManager I = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
    RESULT = I;
    RESULT.setLimit( n.intValue(), 0);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LIMIT_PART",22, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LIMIT ::= LIMIT_PART 
            {
              PeriodicalManager RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager li = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PeriodicalManager();
    RESULT.addManager(li, li.getLimit());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LIMIT",23, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LIMIT ::= LIMIT COMMA LIMIT_PART 
            {
              PeriodicalManager RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		PeriodicalManager r = (PeriodicalManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager li = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = r;
    RESULT.addManager(li, li.getLimit());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LIMIT",23, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEPRECIATION ::= DEPRECIATE NUMBER COMMA PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new DepreciationManager(pe,num);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("DEPRECIATION",19, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INTERESTS ::= GERMAN NUMBER COMMA NUMBER COMMA NUMBER COMMA PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).right;
		Double A = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		Double P = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int Jleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int Jright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		Double J = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int PEleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int PEright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String PE = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT= new FeeManager(A, P.intValue(), J.intValue(), PE ,Options.GERMAN);;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INTERESTS",20, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INTERESTS ::= FRENCH NUMBER COMMA NUMBER COMMA NUMBER COMMA PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).right;
		Double A = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		Double P = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int Jleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int Jright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		Double J = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int PEleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int PEright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String PE = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT=new FeeManager(A, P.intValue(), J.intValue(), PE ,Options.FRENCH);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INTERESTS",20, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERATE ::= OPBRAC INSTRUCTION CLBRAC 
            {
              FinancialDataManager RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		 RESULT = i; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPERATE",21, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERATE ::= OPERATE MINUS OPBRAC INSTRUCTION CLBRAC 
            {
              FinancialDataManager RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		FinancialDataManager op = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
   RESULT = new ArithmeticalManager(Options.SUBSTRACT, op.getValues(), i);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPERATE",21, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERATE ::= OPERATE PLUS OPBRAC INSTRUCTION CLBRAC 
            {
              FinancialDataManager RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		FinancialDataManager op = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
    RESULT = new ArithmeticalManager(Options.ADD, op.getValues(), i);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPERATE",21, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCTION ::= OPERATE 
            {
              FinancialDataManager RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager op = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = op; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCTION ::= NUMBER 
            {
              FinancialDataManager RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = new FlatValuesManager(num, 10);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCTION ::= INTERESTS 
            {
              FinancialDataManager RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager in = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = in; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCTION ::= DEPRECIATION 
            {
              FinancialDataManager RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager d = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = d; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCTION ::= LIMIT 
            {
              FinancialDataManager RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		PeriodicalManager l = (PeriodicalManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = l; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCTION ::= PROGNOSTICS 
            {
              FinancialDataManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		PrognosticManager p = (PrognosticManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = p; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCTION ::= STAIR 
            {
              FinancialDataManager RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager s = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = s; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTION ::= PERCENT 
            {
              FinancialDataManager RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager I = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT= I; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ID_PART ::= COSTS 
            {
              FinancialDataManager RESULT =null;
		
            RESULT = new FinancialDataManager();
            RESULT.setName("costos");
        
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("ID_PART",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ID_PART ::= REVENUE 
            {
              FinancialDataManager RESULT =null;
		
            RESULT = new FinancialDataManager();
            RESULT.setName("ingresos");
        
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("ID_PART",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ID_PART ::= ID_PART OPSQBRAC BOOL COMMA BOOL CLSQBRAC 
            {
              FinancialDataManager RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)).right;
		FinancialDataManager I = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).right;
		Boolean fa = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).value;
		int shleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int shright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Boolean sh = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
            RESULT = new FinancialDataManager();
            RESULT.setName(I.getName());
            RESULT.setHasBill(fa);
            RESULT.setIsShield(sh);
        
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("ID_PART",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ID_PART ::= IDENTIFIER 
            {
              FinancialDataManager RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
            RESULT = new FinancialDataManager();
            RESULT.setName(n);
        
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("ID_PART",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COSTS_LINE ::= ID_PART EQUALS INSTRUCTION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager in = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
                in.setHasBill(i.hasBill());
                in.setIsShield(i.isShield());
                flujo.AddOutlay(i.getName(), in);
                System.out.println(in);
              
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_LINE",14, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // COSTS_LINE ::= COSTS_LINE SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_LINE",14, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COSTS_BODY ::= COSTS_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_BODY",12, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COSTS_BODY ::= COSTS_BODY COSTS_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_BODY",12, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COSTS_HEAD ::= OUTLAY OPCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_HEAD",13, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COSTS_PART ::= COSTS_HEAD COSTS_BODY CLCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_PART",11, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_PART ::= MARR_PART INFO_PART COSTS_PART 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BODY_PART",2, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // HEADER_PART ::= FLOW IDENTIFIER OPCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("HEADER_PART",1, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TYPE ::= NET 
            {
              Integer RESULT =null;
		RESULT = CashFlow.NET;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("TYPE",31, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TYPE ::= GROSS 
            {
              Integer RESULT =null;
		RESULT = CashFlow.GROSS; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("TYPE",31, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BOOL ::= NO 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BOOL",32, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BOOL ::= YES 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BOOL",32, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // FILE ::= HEADER_PART BODY_PART CLCURLYBRAC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("FILE",0, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= FILE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		RESULT = start_val;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxAnalysis$parser.done_parsing();
          return CUP$SintaxAnalysis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

