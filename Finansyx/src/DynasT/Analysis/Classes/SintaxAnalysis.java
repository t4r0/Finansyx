
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 05 23:50:40 CST 2013
//----------------------------------------------------

package DynasT.Analysis.Classes;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 05 23:50:40 CST 2013
  */
public class SintaxAnalysis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxAnalysis() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxAnalysis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxAnalysis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\004\000\002\020" +
    "\003\000\002\020\003\000\002\021\003\000\002\021\003" +
    "\000\002\003\004\000\002\004\005\000\002\007\004\000" +
    "\002\006\004\000\002\010\004\000\002\010\003\000\002" +
    "\011\005\000\002\012\006\000\002\013\004\000\002\014" +
    "\004\000\002\015\004\000\002\015\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\003\000\002\016\005\000" +
    "\002\016\003\000\002\022\006\000\002\022\006\000\002" +
    "\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\004\034\005\001\002\000\004\053\014\001" +
    "\002\000\004\056\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\053\ufffb\001\002\000" +
    "\004\002\000\001\002\000\004\034\032\001\002\000\004" +
    "\056\017\001\002\000\004\057\015\001\002\000\004\056" +
    "\ufff8\001\002\000\006\034\ufff6\056\ufff6\001\002\000\004" +
    "\022\022\001\002\000\006\034\ufff9\056\017\001\002\000" +
    "\006\034\ufff7\056\ufff7\001\002\000\004\057\024\001\002" +
    "\000\006\034\ufff5\056\ufff5\001\002\000\004\015\025\001" +
    "\002\000\004\057\026\001\002\000\004\020\027\001\002" +
    "\000\006\034\ufff4\056\ufff4\001\002\000\016\023\037\024" +
    "\045\027\040\040\041\045\043\046\042\001\002\000\004" +
    "\030\034\001\002\000\004\037\033\001\002\000\016\023" +
    "\ufff2\024\ufff2\027\ufff2\040\ufff2\045\ufff2\046\ufff2\001\002" +
    "\000\004\020\036\001\002\000\004\002\ufffa\001\002\000" +
    "\004\002\uffe8\001\002\000\004\021\066\001\002\000\020" +
    "\023\ufffd\024\ufffd\027\ufffd\030\ufffd\040\ufffd\045\ufffd\046" +
    "\ufffd\001\002\000\004\021\064\001\002\000\004\021\060" +
    "\001\002\000\020\023\ufffc\024\ufffc\027\ufffc\030\ufffc\040" +
    "\ufffc\045\ufffc\046\ufffc\001\002\000\020\023\uffed\024\uffed" +
    "\027\uffed\030\uffed\040\uffed\045\uffed\046\uffed\001\002\000" +
    "\006\030\052\043\053\001\002\000\020\023\037\024\045" +
    "\027\040\030\ufff3\040\041\045\043\046\042\001\002\000" +
    "\020\023\uffeb\024\uffeb\027\uffeb\030\uffeb\040\uffeb\045\uffeb" +
    "\046\uffeb\001\002\000\020\023\ufff0\024\ufff0\027\ufff0\030" +
    "\ufff0\040\ufff0\045\ufff0\046\ufff0\001\002\000\020\023\ufff1" +
    "\024\ufff1\027\ufff1\030\ufff1\040\ufff1\045\ufff1\046\ufff1\001" +
    "\002\000\004\021\056\001\002\000\004\021\054\001\002" +
    "\000\004\054\055\001\002\000\020\023\uffea\024\uffea\027" +
    "\uffea\030\uffea\040\uffea\045\uffea\046\uffea\001\002\000\004" +
    "\054\057\001\002\000\020\023\uffe9\024\uffe9\027\uffe9\030" +
    "\uffe9\040\uffe9\045\uffe9\046\uffe9\001\002\000\006\060\061" +
    "\061\063\001\002\000\020\023\uffff\024\uffff\027\uffff\030" +
    "\uffff\040\uffff\045\uffff\046\uffff\001\002\000\020\023\uffee" +
    "\024\uffee\027\uffee\030\uffee\040\uffee\045\uffee\046\uffee\001" +
    "\002\000\020\023\ufffe\024\ufffe\027\ufffe\030\ufffe\040\ufffe" +
    "\045\ufffe\046\ufffe\001\002\000\004\054\065\001\002\000" +
    "\020\023\uffef\024\uffef\027\uffef\030\uffef\040\uffef\045\uffef" +
    "\046\uffef\001\002\000\004\054\067\001\002\000\020\023" +
    "\uffec\024\uffec\027\uffec\030\uffec\040\uffec\045\uffec\046\uffec" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\006\002\005\003\003\001\001\000\010\004" +
    "\010\006\012\007\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\030\014\027\001\001\000\006\010\017" +
    "\011\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\020\001\001" +
    "\000\002\001\001\000\004\012\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\045\016\047\021\043\022" +
    "\046\001\001\000\004\017\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\050\021\043\022\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxAnalysis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxAnalysis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxAnalysis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxAnalysis$actions {


    

  private final SintaxAnalysis parser;

  /** Constructor */
  CUP$SintaxAnalysis$actions(SintaxAnalysis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxAnalysis$do_action(
    int                        CUP$SintaxAnalysis$act_num,
    java_cup.runtime.lr_parser CUP$SintaxAnalysis$parser,
    java.util.Stack            CUP$SintaxAnalysis$stack,
    int                        CUP$SintaxAnalysis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxAnalysis$result;

      /* select the action based on the action number */
      switch (CUP$SintaxAnalysis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COSTS_PART ::= COSTS SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_PART",13, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LAST_INFO ::= LAST COSTS EQUALS INTEGER 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LAST_INFO",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LAST_INFO ::= LAST REVENUE EQUALS INTEGER 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LAST_INFO",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INFO_OPTION ::= LAST_INFO 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",12, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INFO_OPTION ::= ASSETS EQUALS INTEGER 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",12, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INFO_OPTION ::= TYPE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",12, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INFO_OPTION ::= PATENT EQUALS BOOL 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",12, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INFO_OPTION ::= FIRST EQUALS INTEGER 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",12, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INFO_BODY ::= INFO_OPTION 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_BODY",11, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INFO_BODY ::= INFO_BODY INFO_OPTION 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_BODY",11, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INFO_HEADER ::= FLOW INFO 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_HEADER",10, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INFO_PART ::= INFO_HEADER INFO_BODY 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_PART",9, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MARR_PARAM ::= PERCENTAGE COMMA PERCENTAGE SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_PARAM",8, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MARR_LINE ::= IDENTIFIER POINTER MARR_PARAM 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_LINE",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MARR_BODY ::= MARR_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_BODY",6, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MARR_BODY ::= MARR_BODY MARR_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_BODY",6, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MARR_HEADER ::= MARR PERCENTAGE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_HEADER",4, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MARR_PART ::= MARR_HEADER MARR_BODY 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_PART",5, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_PART ::= MARR_PART INFO_PART COSTS_PART 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BODY_PART",2, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // HEADER_PART ::= FLOW IDENTIFIER 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("HEADER_PART",1, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TYPE ::= NET 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TYPE ::= GROSS 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BOOL ::= NO 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BOOL",14, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BOOL ::= YES 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BOOL",14, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // FILE ::= HEADER_PART BODY_PART 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("FILE",0, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= FILE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		RESULT = start_val;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxAnalysis$parser.done_parsing();
          return CUP$SintaxAnalysis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

