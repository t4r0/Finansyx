
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 06 23:34:40 CST 2013
//----------------------------------------------------

package DynasT.Analysis.Classes;

import java_cup.runtime.*;
import finansyx.commons.*;
import finansyx.commons.CashFlow.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 06 23:34:40 CST 2013
  */
public class SintaxAnalysis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxAnalysis() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxAnalysis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxAnalysis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\005\000\002\022" +
    "\003\000\002\022\003\000\002\021\003\000\002\021\003" +
    "\000\002\003\005\000\002\004\004\000\002\016\005\000" +
    "\002\017\005\000\002\006\004\000\002\006\003\000\002" +
    "\015\005\000\002\020\006\000\002\007\005\000\002\010" +
    "\004\000\002\011\004\000\002\011\003\000\002\013\004" +
    "\000\002\012\005\000\002\012\005\000\002\012\003\000" +
    "\002\012\005\000\002\012\003\000\002\014\006\000\002" +
    "\014\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\004\033\005\001\002\000\004\051\015\001" +
    "\002\000\004\053\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\013\011\001\002\000" +
    "\004\051\ufffb\001\002\000\004\014\073\001\002\000\004" +
    "\036\034\001\002\000\004\053\021\001\002\000\004\054" +
    "\016\001\002\000\004\013\017\001\002\000\004\053\ufff8" +
    "\001\002\000\006\014\ufff6\053\021\001\002\000\004\022" +
    "\024\001\002\000\004\014\023\001\002\000\004\036\ufff9" +
    "\001\002\000\004\054\026\001\002\000\006\014\ufff5\053" +
    "\ufff5\001\002\000\004\015\027\001\002\000\004\054\030" +
    "\001\002\000\004\020\031\001\002\000\006\014\ufff4\053" +
    "\ufff4\001\002\000\004\014\ufff7\001\002\000\016\023\037" +
    "\024\046\037\041\044\042\057\040\060\043\001\002\000" +
    "\004\013\036\001\002\000\004\014\ufffa\001\002\000\016" +
    "\023\ufff2\024\ufff2\037\ufff2\044\ufff2\057\ufff2\060\ufff2\001" +
    "\002\000\004\021\071\001\002\000\004\020\ufffd\001\002" +
    "\000\004\021\067\001\002\000\004\021\063\001\002\000" +
    "\004\020\ufffc\001\002\000\020\014\ufff0\023\037\024\046" +
    "\037\041\044\042\057\040\060\043\001\002\000\004\020" +
    "\uffec\001\002\000\006\027\054\042\055\001\002\000\004" +
    "\014\053\001\002\000\004\020\uffea\001\002\000\004\020" +
    "\052\001\002\000\020\014\uffef\023\uffef\024\uffef\037\uffef" +
    "\044\uffef\057\uffef\060\uffef\001\002\000\004\014\ufff3\001" +
    "\002\000\004\021\060\001\002\000\004\021\056\001\002" +
    "\000\004\052\057\001\002\000\004\020\uffe9\001\002\000" +
    "\004\052\061\001\002\000\004\020\uffe8\001\002\000\004" +
    "\014\ufff1\001\002\000\006\055\064\056\066\001\002\000" +
    "\004\020\uffff\001\002\000\004\020\uffed\001\002\000\004" +
    "\020\ufffe\001\002\000\004\052\070\001\002\000\004\020" +
    "\uffee\001\002\000\004\052\072\001\002\000\004\020\uffeb" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\006\002\005\003\003\001\001\000\010\004" +
    "\011\016\012\017\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\034\010\032\001\001" +
    "\000\006\006\021\015\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\031\015\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\011\046\012\050\013\043" +
    "\014\047\021\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\011\061\012\050\013\043\014\047\021\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxAnalysis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxAnalysis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxAnalysis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxAnalysis$actions {



    public CashFlow flujo = new CashFlow();
    MARRManager marr = new MARRManager();
    String inflacion = "0%";

  private final SintaxAnalysis parser;

  /** Constructor */
  CUP$SintaxAnalysis$actions(SintaxAnalysis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxAnalysis$do_action(
    int                        CUP$SintaxAnalysis$act_num,
    java_cup.runtime.lr_parser CUP$SintaxAnalysis$parser,
    java.util.Stack            CUP$SintaxAnalysis$stack,
    int                        CUP$SintaxAnalysis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxAnalysis$result;

      /* select the action based on the action number */
      switch (CUP$SintaxAnalysis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LAST_INFO ::= LAST COSTS EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setLasYearCosts(n); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LAST_INFO",10, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LAST_INFO ::= LAST REVENUE EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setLastYearRevenue(n);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LAST_INFO",10, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INFO_OPTION ::= LAST_INFO 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",8, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INFO_OPTION ::= ASSETS EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setAssets(n);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",8, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INFO_OPTION ::= TYPE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setType(t);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",8, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INFO_OPTION ::= PATENT EQUALS BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setCommerce(b); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",8, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INFO_OPTION ::= FIRST EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setStart(n.intValue()); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",8, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INFO_LINE ::= INFO_OPTION SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_LINE",9, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INFO_BODY ::= INFO_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_BODY",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INFO_BODY ::= INFO_LINE INFO_BODY 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_BODY",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INFO_HEADER ::= INFO OPCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_HEADER",6, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INFO_PART ::= INFO_HEADER INFO_BODY CLCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_PART",5, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MARR_PARAM ::= PERCENTAGE COMMA PERCENTAGE SEMICOLON 
            {
              MARRStructure RESULT =null;
		int riskleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).left;
		int riskright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).right;
		String risk = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).value;
		int percentageleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int percentageright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		String percentage = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		 
   RESULT = new MARRStructure(percentage, inflacion, risk);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_PARAM",14, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MARR_LINE ::= IDENTIFIER POINTER MARR_PARAM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		MARRStructure m = (MARRStructure)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 marr.addInvestor(i,m);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_LINE",11, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MARR_BODY ::= MARR_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_BODY",4, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MARR_BODY ::= MARR_LINE MARR_BODY 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_BODY",4, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MARR_HEADER ::= MARR PERCENTAGE OPCURLYBRAC 
            {
              MARRManager RESULT =null;
		int percentageleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int percentageright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		String percentage = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
    RESULT = new MARRManager(percentage);
    inflacion = percentage;
    marr = RESULT;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_HEADER",13, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MARR_PART ::= MARR_HEADER MARR_BODY CLCURLYBRAC 
            {
              MARRManager RESULT =null;
		
 flujo.setMarr(marr);
 System.out.println("tmar= " + marr.getMarr());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_PART",12, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_PART ::= MARR_PART INFO_PART 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BODY_PART",2, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // HEADER_PART ::= FLOW IDENTIFIER OPCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("HEADER_PART",1, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TYPE ::= NET 
            {
              Integer RESULT =null;
		RESULT = CashFlow.NET;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TYPE ::= GROSS 
            {
              Integer RESULT =null;
		RESULT = CashFlow.GROSS; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("TYPE",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BOOL ::= NO 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BOOL",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BOOL ::= YES 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BOOL",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // FILE ::= HEADER_PART BODY_PART CLCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("FILE",0, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= FILE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		RESULT = start_val;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxAnalysis$parser.done_parsing();
          return CUP$SintaxAnalysis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

