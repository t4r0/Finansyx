
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 08 20:33:24 CST 2013
//----------------------------------------------------

package DynasT.Analysis.Classes;

import finansyx.commons.*;
import finansyx.commons.CashFlow.*;
import finansyx.commons.Manage.*;
import finansyx.commons.Prognostication.ModelManager;
import finansyx.commons.Rules.Options;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 08 20:33:24 CST 2013
  */
public class SintaxAnalysis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxAnalysis() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxAnalysis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxAnalysis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\006\000\002\045" +
    "\003\000\002\045\003\000\002\044\003\000\002\044\003" +
    "\000\002\003\005\000\002\004\005\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\015\005\000\002" +
    "\017\004\000\002\016\004\000\002\016\003\000\002\020" +
    "\004\000\002\020\005\000\002\021\003\000\002\021\010" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\031\006\000\002\032\006\000\002\032\010" +
    "\000\002\027\007\000\002\027\007\000\002\027\005\000" +
    "\002\026\012\000\002\026\012\000\002\025\006\000\002" +
    "\034\005\000\002\034\003\000\002\030\007\000\002\024" +
    "\005\000\002\024\005\000\002\023\010\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\040\003\000\002\040\005\000\002\037\004\000\002\037" +
    "\004\000\002\036\004\000\002\036\005\000\002\036\004" +
    "\000\002\041\005\000\002\042\005\000\002\005\004\000" +
    "\002\005\003\000\002\014\005\000\002\043\006\000\002" +
    "\006\005\000\002\007\004\000\002\010\004\000\002\010" +
    "\003\000\002\012\004\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\003\000\002\011\005\000" +
    "\002\011\003\000\002\013\006\000\002\013\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\004\032\005\001\002\000\004\050\015\001" +
    "\002\000\004\053\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\014\011\001\002\000" +
    "\004\050\ufffb\001\002\000\004\015\263\001\002\000\004" +
    "\035\035\001\002\000\004\053\021\001\002\000\004\054" +
    "\016\001\002\000\004\014\017\001\002\000\004\053\uffc6" +
    "\001\002\000\006\015\uffc4\053\021\001\002\000\004\012" +
    "\024\001\002\000\004\015\023\001\002\000\004\035\uffc7" +
    "\001\002\000\004\054\026\001\002\000\006\015\uffc3\053" +
    "\uffc3\001\002\000\004\016\027\001\002\000\004\054\030" +
    "\001\002\000\004\021\031\001\002\000\006\015\uffc2\053" +
    "\uffc2\001\002\000\004\015\uffc5\001\002\000\020\023\226" +
    "\024\235\030\237\036\230\042\231\057\227\060\232\001" +
    "\002\000\004\034\040\001\002\000\004\014\036\001\002" +
    "\000\020\023\uffc0\024\uffc0\030\uffc0\036\uffc0\042\uffc0\057" +
    "\uffc0\060\uffc0\001\002\000\010\026\045\041\047\053\046" +
    "\001\002\000\004\014\042\001\002\000\004\015\ufffa\001" +
    "\002\000\010\026\ufff5\041\ufff5\053\ufff5\001\002\000\006" +
    "\017\056\022\055\001\002\000\006\017\ufff0\022\ufff0\001" +
    "\002\000\030\005\ufff7\011\ufff7\013\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\021\ufff7\022\ufff7\026\ufff7\041\ufff7\053\ufff7\001" +
    "\002\000\030\005\ufff9\011\ufff9\013\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\021\ufff9\022\ufff9\026\ufff9\041\ufff9\053\ufff9\001" +
    "\002\000\030\005\ufff8\011\ufff8\013\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\021\ufff8\022\ufff8\026\ufff8\041\ufff8\053\ufff8\001" +
    "\002\000\012\015\053\026\045\041\047\053\046\001\002" +
    "\000\014\015\ufff3\021\052\026\ufff3\041\ufff3\053\ufff3\001" +
    "\002\000\014\015\ufff2\021\ufff2\026\ufff2\041\ufff2\053\ufff2" +
    "\001\002\000\004\015\ufff6\001\002\000\014\015\ufff4\021" +
    "\052\026\ufff4\041\ufff4\053\ufff4\001\002\000\046\004\110" +
    "\006\070\017\071\025\114\026\045\027\113\033\073\037" +
    "\101\040\066\041\047\043\100\044\072\045\074\046\076" +
    "\047\116\051\106\052\103\053\046\001\002\000\006\055" +
    "\057\056\061\001\002\000\010\016\uffff\020\uffff\021\uffff" +
    "\001\002\000\004\016\062\001\002\000\010\016\ufffe\020" +
    "\ufffe\021\ufffe\001\002\000\006\055\057\056\061\001\002" +
    "\000\004\020\064\001\002\000\006\017\uffef\022\uffef\001" +
    "\002\000\022\005\uffe9\011\uffe9\013\uffe9\015\uffe9\021\uffe9" +
    "\026\uffe9\041\uffe9\053\uffe9\001\002\000\006\017\121\052" +
    "\122\001\002\000\022\005\uffee\011\uffee\013\uffee\015\uffee" +
    "\021\uffee\026\uffee\041\uffee\053\uffee\001\002\000\006\017" +
    "\121\052\122\001\002\000\046\004\110\006\070\017\071" +
    "\025\114\026\045\027\113\033\073\037\101\040\066\041" +
    "\047\043\100\044\072\045\074\046\076\047\116\051\106" +
    "\052\103\053\046\001\002\000\006\017\121\052\122\001" +
    "\002\000\004\052\202\001\002\000\006\017\121\052\122" +
    "\001\002\000\022\005\uffe5\011\uffe5\013\uffe5\015\uffe5\021" +
    "\uffe5\026\uffe5\041\uffe5\053\uffe5\001\002\000\006\017\121" +
    "\052\122\001\002\000\024\005\uffeb\011\uffeb\013\uffeb\015" +
    "\uffeb\016\176\021\uffeb\026\uffeb\041\uffeb\053\uffeb\001\002" +
    "\000\006\017\121\052\122\001\002\000\006\017\121\052" +
    "\122\001\002\000\026\005\uffe7\007\164\010\165\011\uffe7" +
    "\013\uffe7\015\uffe7\021\uffe7\026\uffe7\041\uffe7\053\uffe7\001" +
    "\002\000\022\005\uffe8\011\uffe8\013\uffe8\015\uffe8\021\uffe8" +
    "\026\uffe8\041\uffe8\053\uffe8\001\002\000\016\011\152\015" +
    "\ufff1\021\ufff1\026\ufff1\041\ufff1\053\ufff1\001\002\000\024" +
    "\005\uffda\011\uffda\013\uffda\015\uffda\016\uffda\021\uffda\026" +
    "\uffda\041\uffda\053\uffda\001\002\000\004\052\161\001\002" +
    "\000\026\005\uffec\007\154\010\156\011\uffec\013\uffec\015" +
    "\uffec\021\uffec\026\uffec\041\uffec\053\uffec\001\002\000\046" +
    "\004\110\006\070\017\071\025\114\026\045\027\113\033" +
    "\073\037\101\040\066\041\047\043\100\044\072\045\074" +
    "\046\076\047\116\051\106\052\103\053\046\001\002\000" +
    "\022\005\uffed\011\uffed\013\uffed\015\uffed\021\uffed\026\uffed" +
    "\041\uffed\053\uffed\001\002\000\022\005\uffea\011\uffea\013" +
    "\uffea\015\uffea\021\uffea\026\uffea\041\uffea\053\uffea\001\002" +
    "\000\004\054\143\001\002\000\004\052\134\001\002\000" +
    "\004\011\132\001\002\000\006\017\121\052\122\001\002" +
    "\000\022\005\uffe6\011\uffe6\013\uffe6\015\uffe6\021\uffe6\026" +
    "\uffe6\041\uffe6\053\uffe6\001\002\000\030\005\uffce\007\uffce" +
    "\010\uffce\011\uffce\013\uffce\015\uffce\016\130\021\uffce\026" +
    "\uffce\041\uffce\053\uffce\001\002\000\006\017\121\052\122" +
    "\001\002\000\006\016\124\020\125\001\002\000\026\005" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\013\uffd3\015\uffd3\021\uffd3" +
    "\026\uffd3\041\uffd3\053\uffd3\001\002\000\006\017\121\052" +
    "\122\001\002\000\030\005\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\013\uffc8\015\uffc8\016\uffc8\021\uffc8\026\uffc8\041\uffc8\053" +
    "\uffc8\001\002\000\030\005\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\013\uffc9\015\uffc9\016\uffc9\021\uffc9\026\uffc9\041\uffc9\053" +
    "\uffc9\001\002\000\030\005\uffca\007\uffca\010\uffca\011\uffca" +
    "\013\uffca\015\uffca\016\uffca\021\uffca\026\uffca\041\uffca\053" +
    "\uffca\001\002\000\004\052\131\001\002\000\026\005\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\013\uffcd\015\uffcd\021\uffcd\026" +
    "\uffcd\041\uffcd\053\uffcd\001\002\000\004\054\133\001\002" +
    "\000\022\005\uffd8\011\uffd8\013\uffd8\015\uffd8\021\uffd8\026" +
    "\uffd8\041\uffd8\053\uffd8\001\002\000\004\016\135\001\002" +
    "\000\004\052\136\001\002\000\004\016\137\001\002\000" +
    "\004\052\140\001\002\000\004\016\141\001\002\000\004" +
    "\054\142\001\002\000\022\005\uffdd\011\uffdd\013\uffdd\015" +
    "\uffdd\021\uffdd\026\uffdd\041\uffdd\053\uffdd\001\002\000\004" +
    "\016\144\001\002\000\004\052\145\001\002\000\004\016" +
    "\146\001\002\000\004\052\147\001\002\000\022\005\uffd6" +
    "\011\uffd6\013\uffd6\015\uffd6\021\uffd6\026\uffd6\041\uffd6\053" +
    "\uffd6\001\002\000\006\005\151\011\152\001\002\000\026" +
    "\005\uffdf\007\uffdf\010\uffdf\011\uffdf\013\uffdf\015\uffdf\021" +
    "\uffdf\026\uffdf\041\uffdf\053\uffdf\001\002\000\004\054\153" +
    "\001\002\000\022\005\uffd7\011\uffd7\013\uffd7\015\uffd7\021" +
    "\uffd7\026\uffd7\041\uffd7\053\uffd7\001\002\000\004\054\160" +
    "\001\002\000\026\005\uffd5\007\uffd5\010\uffd5\011\uffd5\013" +
    "\uffd5\015\uffd5\021\uffd5\026\uffd5\041\uffd5\053\uffd5\001\002" +
    "\000\004\054\157\001\002\000\026\005\uffcb\007\uffcb\010" +
    "\uffcb\011\uffcb\013\uffcb\015\uffcb\021\uffcb\026\uffcb\041\uffcb" +
    "\053\uffcb\001\002\000\026\005\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\013\uffcc\015\uffcc\021\uffcc\026\uffcc\041\uffcc\053\uffcc" +
    "\001\002\000\004\016\162\001\002\000\004\054\163\001" +
    "\002\000\022\005\uffdc\011\uffdc\013\uffdc\015\uffdc\021\uffdc" +
    "\026\uffdc\041\uffdc\053\uffdc\001\002\000\004\004\171\001" +
    "\002\000\004\004\166\001\002\000\046\004\110\006\070" +
    "\017\071\025\114\026\045\027\113\033\073\037\101\040" +
    "\066\041\047\043\100\044\072\045\074\046\076\047\116" +
    "\051\106\052\103\053\046\001\002\000\006\005\170\011" +
    "\152\001\002\000\026\005\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\013\uffe0\015\uffe0\021\uffe0\026\uffe0\041\uffe0\053\uffe0\001" +
    "\002\000\046\004\110\006\070\017\071\025\114\026\045" +
    "\027\113\033\073\037\101\040\066\041\047\043\100\044" +
    "\072\045\074\046\076\047\116\051\106\052\103\053\046" +
    "\001\002\000\006\005\173\011\152\001\002\000\026\005" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1\015\uffe1\021\uffe1" +
    "\026\uffe1\041\uffe1\053\uffe1\001\002\000\026\005\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\013\uffd2\015\uffd2\021\uffd2\026\uffd2" +
    "\041\uffd2\053\uffd2\001\002\000\026\005\uffd0\007\uffd0\010" +
    "\uffd0\011\uffd0\013\uffd0\015\uffd0\021\uffd0\026\uffd0\041\uffd0" +
    "\053\uffd0\001\002\000\004\017\071\001\002\000\024\005" +
    "\uffdb\011\uffdb\013\uffdb\015\uffdb\016\uffdb\021\uffdb\026\uffdb" +
    "\041\uffdb\053\uffdb\001\002\000\026\005\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\013\uffd4\015\uffd4\021\uffd4\026\uffd4\041\uffd4" +
    "\053\uffd4\001\002\000\026\005\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\013\uffcf\015\uffcf\021\uffcf\026\uffcf\041\uffcf\053\uffcf" +
    "\001\002\000\004\016\203\001\002\000\004\052\204\001" +
    "\002\000\004\016\205\001\002\000\004\052\206\001\002" +
    "\000\004\016\207\001\002\000\004\054\210\001\002\000" +
    "\022\005\uffde\011\uffde\013\uffde\015\uffde\021\uffde\026\uffde" +
    "\041\uffde\053\uffde\001\002\000\004\016\212\001\002\000" +
    "\010\026\045\041\047\053\046\001\002\000\024\005\uffe3" +
    "\011\uffe3\013\uffe3\015\uffe3\016\214\021\uffe3\026\uffe3\041" +
    "\uffe3\053\uffe3\001\002\000\006\007\154\010\156\001\002" +
    "\000\022\005\uffe2\011\uffe2\013\uffe2\015\uffe2\021\uffe2\026" +
    "\uffe2\041\uffe2\053\uffe2\001\002\000\006\011\152\013\217" +
    "\001\002\000\004\052\220\001\002\000\004\020\221\001" +
    "\002\000\024\005\uffd9\011\uffd9\013\uffd9\015\uffd9\016\uffd9" +
    "\021\uffd9\026\uffd9\041\uffd9\053\uffd9\001\002\000\004\016" +
    "\223\001\002\000\010\026\045\041\047\053\046\001\002" +
    "\000\022\005\uffe4\011\uffe4\013\uffe4\015\uffe4\021\uffe4\026" +
    "\uffe4\041\uffe4\053\uffe4\001\002\000\026\005\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\013\uffd1\015\uffd1\021\uffd1\026\uffd1\041" +
    "\uffd1\053\uffd1\001\002\000\004\022\261\001\002\000\004" +
    "\021\ufffd\001\002\000\004\022\257\001\002\000\004\022" +
    "\255\001\002\000\004\021\ufffc\001\002\000\022\015\uffbe" +
    "\023\226\024\235\030\237\036\230\042\231\057\227\060" +
    "\232\001\002\000\004\021\uffb9\001\002\000\006\026\246" +
    "\041\247\001\002\000\004\015\245\001\002\000\004\022" +
    "\243\001\002\000\004\021\uffb7\001\002\000\004\021\242" +
    "\001\002\000\022\015\uffbd\023\uffbd\024\uffbd\030\uffbd\036" +
    "\uffbd\042\uffbd\057\uffbd\060\uffbd\001\002\000\004\052\244" +
    "\001\002\000\004\021\uffba\001\002\000\004\034\uffc1\001" +
    "\002\000\004\022\252\001\002\000\004\022\250\001\002" +
    "\000\004\052\251\001\002\000\004\021\uffb6\001\002\000" +
    "\004\052\253\001\002\000\004\021\uffb5\001\002\000\004" +
    "\015\uffbf\001\002\000\006\055\057\056\061\001\002\000" +
    "\004\021\uffbb\001\002\000\004\052\260\001\002\000\004" +
    "\021\uffbc\001\002\000\004\052\262\001\002\000\004\021" +
    "\uffb8\001\002\000\004\021\264\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\006\002\005\003\003\001\001\000\010\004" +
    "\011\041\012\042\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\033\007\032\001\001" +
    "\000\006\005\021\014\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\031\014\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\235\011\240\012\232" +
    "\013\237\044\233\001\001\000\006\015\040\017\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\047" +
    "\020\050\021\042\033\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\053\021\042\033\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\022\103\023\110\024\066\025\111\026\064" +
    "\027\101\030\104\031\116\032\074\033\114\034\076\035" +
    "\106\001\001\000\004\045\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\117\040\224\001\001\000\002\001\001\000" +
    "\004\036\221\001\001\000\032\022\215\023\110\024\066" +
    "\025\111\026\064\027\101\030\104\031\116\032\074\033" +
    "\114\034\076\035\106\001\001\000\004\036\210\001\001" +
    "\000\002\001\001\000\006\036\117\040\200\001\001\000" +
    "\002\001\001\000\006\036\117\040\177\001\001\000\002" +
    "\001\001\000\006\036\117\040\174\001\001\000\006\036" +
    "\117\040\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\154\001\001\000\032\022\147\023\110\024\066" +
    "\025\111\026\064\027\101\030\104\031\116\032\074\033" +
    "\114\034\076\035\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\117\040\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\022\166\023\110\024\066\025\111\026\064\027" +
    "\101\030\104\031\116\032\074\033\114\034\076\035\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\022" +
    "\171\023\110\024\066\025\111\026\064\027\101\030\104" +
    "\031\116\032\074\033\114\034\076\035\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\212\001\001\000\002\001\001\000\004\037" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\010\253" +
    "\011\240\012\232\013\237\044\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxAnalysis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxAnalysis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxAnalysis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxAnalysis$actions {



    public CashFlow flujo = new CashFlow();
    MARRManager marr = new MARRManager();
    String inflacion = "0%";

  private final SintaxAnalysis parser;

  /** Constructor */
  CUP$SintaxAnalysis$actions(SintaxAnalysis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxAnalysis$do_action(
    int                        CUP$SintaxAnalysis$act_num,
    java_cup.runtime.lr_parser CUP$SintaxAnalysis$parser,
    java.util.Stack            CUP$SintaxAnalysis$stack,
    int                        CUP$SintaxAnalysis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxAnalysis$result;

      /* select the action based on the action number */
      switch (CUP$SintaxAnalysis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LAST_INFO ::= LAST COSTS EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setLasYearCosts(n); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LAST_INFO",9, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LAST_INFO ::= LAST REVENUE EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setLastYearRevenue(n);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LAST_INFO",9, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INFO_OPTION ::= LAST_INFO 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INFO_OPTION ::= ASSETS EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setAssets(n);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INFO_OPTION ::= TYPE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setType(t);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INFO_OPTION ::= START EQUALS NUMBER 
            {
              Object RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double N = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setStart(N.intValue()); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INFO_OPTION ::= PATENT EQUALS BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setCommerce(b); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INFO_OPTION ::= FIRST EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setInvestment(n); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INFO_LINE ::= INFO_OPTION SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_LINE",8, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INFO_BODY ::= INFO_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_BODY",6, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INFO_BODY ::= INFO_LINE INFO_BODY 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_BODY",6, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INFO_HEADER ::= INFO OPCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_HEADER",5, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INFO_PART ::= INFO_HEADER INFO_BODY CLCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_PART",4, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MARR_PARAM ::= PERCENTAGE COMMA PERCENTAGE SEMICOLON 
            {
              MARRStructure RESULT =null;
		int riskleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).left;
		int riskright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).right;
		String risk = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).value;
		int percentageleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int percentageright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		String percentage = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		 
   RESULT = new MARRStructure(percentage, inflacion, risk);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_PARAM",33, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MARR_LINE ::= IDENTIFIER POINTER MARR_PARAM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		MARRStructure m = (MARRStructure)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 marr.addInvestor(i,m);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_LINE",10, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MARR_BODY ::= MARR_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_BODY",3, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MARR_BODY ::= MARR_LINE MARR_BODY 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_BODY",3, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MARR_HEADER ::= MARR PERCENTAGE OPCURLYBRAC 
            {
              MARRManager RESULT =null;
		int percentageleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int percentageright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		String percentage = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
    RESULT = new MARRManager(percentage);
    inflacion = percentage;
    marr = RESULT;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_HEADER",32, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MARR_PART ::= MARR_HEADER MARR_BODY CLCURLYBRAC 
            {
              MARRManager RESULT =null;
		
 flujo.setMarr(marr);
 System.out.println("tmar= " + marr.getMarr());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_PART",31, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NUM_LIST ::= NUMBER CLSQBRAC 
            {
              ArrayList<Double> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
    RESULT = new ArrayList<>();
    RESULT.add(n);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("NUM_LIST",28, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NUM_LIST ::= NUMBER COMMA NUM_LIST 
            {
              ArrayList<Double> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new ArrayList<>();
    RESULT.add(n);
    RESULT.addAll(li);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("NUM_LIST",28, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NUM_LIST ::= OPSQBRAC NUM_LIST 
            {
              ArrayList<Double> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = li;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("NUM_LIST",28, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INCREASE ::= MINUS PERCENTAGE 
            {
              Double RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		RESULT =-1 * Statistics.percentageFromString(pe);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INCREASE",29, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INCREASE ::= PLUS PERCENTAGE 
            {
              Double RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		RESULT = Statistics.percentageFromString(pe);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INCREASE",29, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // P_OPTIONS ::= NUM_LIST COMMA NUMBER 
            {
              ModelManager RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new ModelManager(li);
    RESULT.setFixedConfidence(n.intValue());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("P_OPTIONS",30, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // P_OPTIONS ::= NUM_LIST 
            {
              ModelManager RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new ModelManager(li);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("P_OPTIONS",30, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PROGNOSTICS ::= MINIMUM P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.MINIMUM,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",27, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PROGNOSTICS ::= PROGNOSTIC P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.PUNTUAL,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",27, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PROGNOSTICS ::= INFMIN P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.MINIMUM_LOWER,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",27, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PROGNOSTICS ::= INF P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.LOWER_LIMIT,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",27, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PROGNOSTICS ::= UPPER_MIN P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.MINIMUM_UPPER,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",27, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PROGNOSTICS ::= UPPER P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.UPPER_LIMIT,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",27, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PROGNOSTICS ::= PROGNOSTICS INCREASE 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		PrognosticManager p = (PrognosticManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double in = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(), p.getConfidence(), p.getOption(), in);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",27, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STAIR ::= TIERED PERCENTAGE COMMA NUMBER COMMA NUMBER 
            {
              FinancialDataManager RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new TieredValuesManager(pe, n.intValue(), flujo.getStart()+1, n2);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("STAIR",17, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PERCENT ::= INSTRUCTION TIMES PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		FinancialDataManager in = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PercentageManager(pe, in);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PERCENT",18, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PERCENT ::= FIND TIMES PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PercentageManager(pe,i);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PERCENT",18, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LIMIT_PART ::= OPSQBRAC INSTRUCTION POLKADOT NUMBER CLSQBRAC 
            {
              FinancialDataManager RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).right;
		FinancialDataManager I = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
    RESULT = I;
    RESULT.setLimit( n.intValue(), 0);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LIMIT_PART",22, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LIMIT ::= LIMIT_PART 
            {
              PeriodicalManager RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager li = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PeriodicalManager();
    RESULT.addManager(li, li.getLimit());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LIMIT",26, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LIMIT ::= LIMIT COMMA LIMIT_PART 
            {
              PeriodicalManager RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		PeriodicalManager r = (PeriodicalManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager li = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = r;
    RESULT.addManager(li, li.getLimit());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LIMIT",26, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEPRECIATION ::= DEPRECIATE NUMBER COMMA PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new DepreciationManager(pe,num);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("DEPRECIATION",19, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INTERESTS ::= GERMAN NUMBER COMMA NUMBER COMMA NUMBER COMMA PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).right;
		Double A = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		Double P = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int Jleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int Jright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		Double J = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int PEleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int PEright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String PE = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT= new FeeManager(A, P.intValue(), J.intValue(), PE ,Options.GERMAN);;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INTERESTS",20, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INTERESTS ::= FRENCH NUMBER COMMA NUMBER COMMA NUMBER COMMA PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).right;
		Double A = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		Double P = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int Jleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int Jright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		Double J = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int PEleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int PEright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String PE = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT=new FeeManager(A, P.intValue(), J.intValue(), PE ,Options.FRENCH);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INTERESTS",20, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERATE ::= OPBRAC INSTRUCTION CLBRAC 
            {
              FinancialDataManager RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		 RESULT = i; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPERATE",21, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERATE ::= OPERATE MINUS OPBRAC INSTRUCTION CLBRAC 
            {
              FinancialDataManager RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		FinancialDataManager op = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
   RESULT = new ArithmeticalManager(Options.SUBSTRACT, op.getValues(), i);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPERATE",21, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERATE ::= OPERATE PLUS OPBRAC INSTRUCTION CLBRAC 
            {
              FinancialDataManager RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		FinancialDataManager op = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
    RESULT = new ArithmeticalManager(Options.ADD, op.getValues(), i);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPERATE",21, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPTIM ::= OPTIMIZER NUM_LIST COMMA FIND COMMA INCREASE 
            {
              FinancialDataManager RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		FinancialDataManager id = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double i = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new Optimizer(li, id, i);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPTIM",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPTIM ::= OPTIMIZER NUM_LIST COMMA FIND 
            {
              FinancialDataManager RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager id = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new Optimizer(li, id, 0.0);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPTIM",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AVER ::= AVERAGE NUM_LIST COMMA FIND 
            {
              FinancialDataManager RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		ArrayList<Double> n = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager id = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new AverageManager(id,n);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("AVER",23, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCTION ::= OPTIM 
            {
              FinancialDataManager RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager op = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		RESULT = op;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCTION ::= AVER 
            {
              FinancialDataManager RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager av = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		RESULT = av;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCTION ::= OPERATE 
            {
              FinancialDataManager RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager op = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = op; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCTION ::= NUMBER 
            {
              FinancialDataManager RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = new FlatValuesManager(num, 10);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCTION ::= INTERESTS 
            {
              FinancialDataManager RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager in = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = in; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCTION ::= DEPRECIATION 
            {
              FinancialDataManager RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager d = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = d; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCTION ::= LIMIT 
            {
              FinancialDataManager RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		PeriodicalManager l = (PeriodicalManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = l; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCTION ::= PROGNOSTICS 
            {
              FinancialDataManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		PrognosticManager p = (PrognosticManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = p; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCTION ::= STAIR 
            {
              FinancialDataManager RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager s = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = s; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCTION ::= PERCENT 
            {
              FinancialDataManager RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager I = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT= I; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ID_PART ::= ID_PART OPSQBRAC BOOL COMMA BOOL CLSQBRAC 
            {
              FinancialDataManager RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)).right;
		FinancialDataManager I = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).right;
		Boolean fa = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).value;
		int shleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int shright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Boolean sh = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
            RESULT = new FinancialDataManager();
            RESULT.setName(I.getName());
            RESULT.setHasBill(fa);
            RESULT.setIsShield(sh);
        
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("ID_PART",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ID_PART ::= FIND 
            {
              FinancialDataManager RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager n = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
            RESULT = n;
        
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("ID_PART",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COSTS_LINE ::= ID_PART EQUALS INSTRUCTION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager in = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
                in.setHasBill(i.hasBill());
                in.setIsShield(i.isShield());
                if(in.isAsset())
                    flujo.AddAsset(i.getName(), (DepreciationManager)(in));
                else
                    flujo.AddOutlay(i.getName(), in);
                System.out.println(in);
              
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_LINE",14, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COSTS_LINE ::= COSTS_LINE SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_LINE",14, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COSTS_BODY ::= COSTS_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_BODY",12, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COSTS_BODY ::= COSTS_BODY COSTS_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_BODY",12, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // COSTS_HEAD ::= OUTLAY OPCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_HEAD",13, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COSTS_PART ::= COSTS_HEAD COSTS_BODY CLCURLYBRAC 
            {
              Object RESULT =null;
		
    flujo.Optimize();

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_PART",11, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FIND ::= COSTS 
            {
              FinancialDataManager RESULT =null;
		flujo.getCosts();
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("FIND",25, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FIND ::= REVENUE 
            {
              FinancialDataManager RESULT =null;
		RESULT = flujo.getRevenue();
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("FIND",25, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FIND ::= IDENTIFIER 
            {
              FinancialDataManager RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = flujo.getOutLay(id);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("FIND",25, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_PART ::= MARR_PART INFO_PART COSTS_PART 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BODY_PART",2, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // HEADER_PART ::= FLOW IDENTIFIER OPCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("HEADER_PART",1, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TYPE ::= NET 
            {
              Integer RESULT =null;
		RESULT = CashFlow.NET;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("TYPE",34, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TYPE ::= GROSS 
            {
              Integer RESULT =null;
		RESULT = CashFlow.GROSS; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("TYPE",34, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BOOL ::= NO 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BOOL",35, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BOOL ::= YES 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BOOL",35, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // FILE ::= HEADER_PART BODY_PART CLCURLYBRAC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("FILE",0, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= FILE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		RESULT = start_val;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxAnalysis$parser.done_parsing();
          return CUP$SintaxAnalysis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

