
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 09 11:29:48 CST 2013
//----------------------------------------------------

package DynasT.Analysis.Classes;

import finansyx.commons.*;
import finansyx.commons.CashFlow.*;
import finansyx.commons.Manage.*;
import finansyx.commons.Prognostication.ModelManager;
import finansyx.commons.Rules.Options;
import java.util.*;
import java.util.HashMap;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 09 11:29:48 CST 2013
  */
public class SintaxAnalysis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxAnalysis() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxAnalysis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxAnalysis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\006\000\002\047" +
    "\003\000\002\047\003\000\002\046\003\000\002\046\003" +
    "\000\002\050\002\000\002\003\006\000\002\004\006\000" +
    "\002\033\004\000\002\033\003\000\002\034\007\000\002" +
    "\035\004\000\002\035\005\000\002\035\004\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\015\006" +
    "\000\002\016\004\000\002\016\003\000\002\017\004\000" +
    "\002\017\005\000\002\020\003\000\002\020\010\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\030\006\000\002\031\006\000\002\031\010\000\002" +
    "\026\007\000\002\026\007\000\002\026\005\000\002\025" +
    "\012\000\002\025\012\000\002\024\006\000\002\036\005" +
    "\000\002\036\003\000\002\027\007\000\002\023\005\000" +
    "\002\023\005\000\002\022\010\000\002\037\004\000\002" +
    "\037\004\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\042\003" +
    "\000\002\042\005\000\002\041\004\000\002\041\004\000" +
    "\002\040\004\000\002\040\005\000\002\040\004\000\002" +
    "\043\005\000\002\044\005\000\002\005\004\000\002\005" +
    "\003\000\002\014\005\000\002\045\006\000\002\006\005" +
    "\000\002\007\004\000\002\010\004\000\002\010\003\000" +
    "\002\012\004\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\003\000\002\011\005\000\002\011" +
    "\003\000\002\013\006\000\002\013\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\004\032\005\001\002\000\004\050\016\001" +
    "\002\000\004\053\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\014\ufffb\001\002\000" +
    "\004\014\012\001\002\000\004\050\ufffa\001\002\000\004" +
    "\015\300\001\002\000\004\035\036\001\002\000\004\053" +
    "\022\001\002\000\004\054\017\001\002\000\004\014\020" +
    "\001\002\000\004\053\uffc0\001\002\000\006\015\uffbe\053" +
    "\022\001\002\000\004\012\025\001\002\000\004\015\024" +
    "\001\002\000\004\035\uffc1\001\002\000\004\054\027\001" +
    "\002\000\006\015\uffbd\053\uffbd\001\002\000\004\016\030" +
    "\001\002\000\004\054\031\001\002\000\004\021\032\001" +
    "\002\000\006\015\uffbc\053\uffbc\001\002\000\004\015\uffbf" +
    "\001\002\000\020\023\243\024\252\030\254\036\245\042" +
    "\246\057\244\060\250\001\002\000\004\034\040\001\002" +
    "\000\004\014\037\001\002\000\020\023\uffba\024\uffba\030" +
    "\uffba\036\uffba\042\uffba\057\uffba\060\uffba\001\002\000\010" +
    "\026\050\041\053\053\051\001\002\000\004\031\042\001" +
    "\002\000\004\053\046\001\002\000\006\015\ufff7\031\042" +
    "\001\002\000\004\015\ufff9\001\002\000\004\015\ufff8\001" +
    "\002\000\010\026\050\041\053\053\051\001\002\000\006" +
    "\007\060\010\061\001\002\000\032\005\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\013\ufff0\016\ufff0\017\ufff0\021\ufff0\022\ufff0" +
    "\026\ufff0\041\ufff0\053\ufff0\001\002\000\032\005\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\013\ufff2\016\ufff2\017\ufff2\021\ufff2" +
    "\022\ufff2\026\ufff2\041\ufff2\053\ufff2\001\002\000\014\013" +
    "\056\021\054\026\050\041\053\053\051\001\002\000\032" +
    "\005\ufff1\007\ufff1\010\ufff1\011\ufff1\013\ufff1\016\ufff1\017" +
    "\ufff1\021\ufff1\022\ufff1\026\ufff1\041\ufff1\053\ufff1\001\002" +
    "\000\014\013\ufff5\021\ufff5\026\ufff5\041\ufff5\053\ufff5\001" +
    "\002\000\006\007\060\010\061\001\002\000\004\031\057" +
    "\001\002\000\006\015\ufff6\031\ufff6\001\002\000\004\054" +
    "\064\001\002\000\004\054\063\001\002\000\014\013\ufff4" +
    "\021\ufff4\026\ufff4\041\ufff4\053\ufff4\001\002\000\024\005" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5\021\uffc5\026\uffc5" +
    "\041\uffc5\053\uffc5\001\002\000\024\005\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\013\uffc6\021\uffc6\026\uffc6\041\uffc6\053\uffc6" +
    "\001\002\000\014\013\ufff3\021\ufff3\026\ufff3\041\ufff3\053" +
    "\ufff3\001\002\000\006\017\uffea\022\uffea\001\002\000\006" +
    "\017\077\022\076\001\002\000\012\013\074\026\050\041" +
    "\053\053\051\001\002\000\014\013\uffed\021\072\026\uffed" +
    "\041\uffed\053\uffed\001\002\000\014\013\uffec\021\uffec\026" +
    "\uffec\041\uffec\053\uffec\001\002\000\014\013\uffee\021\072" +
    "\026\uffee\041\uffee\053\uffee\001\002\000\004\034\075\001" +
    "\002\000\004\031\uffef\001\002\000\046\004\131\006\111" +
    "\017\112\025\135\026\050\027\134\033\114\037\121\040" +
    "\107\041\053\043\122\044\113\045\115\046\117\047\137" +
    "\051\127\052\124\053\051\001\002\000\006\055\100\056" +
    "\102\001\002\000\010\016\uffff\020\uffff\021\uffff\001\002" +
    "\000\004\016\103\001\002\000\010\016\ufffe\020\ufffe\021" +
    "\ufffe\001\002\000\006\055\100\056\102\001\002\000\004" +
    "\020\105\001\002\000\006\017\uffe9\022\uffe9\001\002\000" +
    "\020\005\uffe3\011\uffe3\013\uffe3\021\uffe3\026\uffe3\041\uffe3" +
    "\053\uffe3\001\002\000\006\017\142\052\143\001\002\000" +
    "\020\005\uffe8\011\uffe8\013\uffe8\021\uffe8\026\uffe8\041\uffe8" +
    "\053\uffe8\001\002\000\006\017\142\052\143\001\002\000" +
    "\046\004\131\006\111\017\112\025\135\026\050\027\134" +
    "\033\114\037\121\040\107\041\053\043\122\044\113\045" +
    "\115\046\117\047\137\051\127\052\124\053\051\001\002" +
    "\000\006\017\142\052\143\001\002\000\004\052\217\001" +
    "\002\000\006\017\142\052\143\001\002\000\020\005\uffdf" +
    "\011\uffdf\013\uffdf\021\uffdf\026\uffdf\041\uffdf\053\uffdf\001" +
    "\002\000\006\017\142\052\143\001\002\000\022\005\uffe5" +
    "\011\uffe5\013\uffe5\016\213\021\uffe5\026\uffe5\041\uffe5\053" +
    "\uffe5\001\002\000\006\017\142\052\143\001\002\000\006" +
    "\017\142\052\143\001\002\000\024\005\uffe1\007\201\010" +
    "\202\011\uffe1\013\uffe1\021\uffe1\026\uffe1\041\uffe1\053\uffe1" +
    "\001\002\000\020\005\uffe2\011\uffe2\013\uffe2\021\uffe2\026" +
    "\uffe2\041\uffe2\053\uffe2\001\002\000\016\011\173\013\uffeb" +
    "\021\uffeb\026\uffeb\041\uffeb\053\uffeb\001\002\000\022\005" +
    "\uffd4\011\uffd4\013\uffd4\016\uffd4\021\uffd4\026\uffd4\041\uffd4" +
    "\053\uffd4\001\002\000\004\052\176\001\002\000\024\005" +
    "\uffe6\007\060\010\061\011\uffe6\013\uffe6\021\uffe6\026\uffe6" +
    "\041\uffe6\053\uffe6\001\002\000\046\004\131\006\111\017" +
    "\112\025\135\026\050\027\134\033\114\037\121\040\107" +
    "\041\053\043\122\044\113\045\115\046\117\047\137\051" +
    "\127\052\124\053\051\001\002\000\020\005\uffe7\011\uffe7" +
    "\013\uffe7\021\uffe7\026\uffe7\041\uffe7\053\uffe7\001\002\000" +
    "\020\005\uffe4\011\uffe4\013\uffe4\021\uffe4\026\uffe4\041\uffe4" +
    "\053\uffe4\001\002\000\004\054\164\001\002\000\004\052" +
    "\155\001\002\000\004\011\153\001\002\000\006\017\142" +
    "\052\143\001\002\000\020\005\uffe0\011\uffe0\013\uffe0\021" +
    "\uffe0\026\uffe0\041\uffe0\053\uffe0\001\002\000\026\005\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\013\uffc8\016\151\021\uffc8\026" +
    "\uffc8\041\uffc8\053\uffc8\001\002\000\006\017\142\052\143" +
    "\001\002\000\006\016\145\020\146\001\002\000\024\005" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\013\uffcd\021\uffcd\026\uffcd" +
    "\041\uffcd\053\uffcd\001\002\000\006\017\142\052\143\001" +
    "\002\000\026\005\uffc2\007\uffc2\010\uffc2\011\uffc2\013\uffc2" +
    "\016\uffc2\021\uffc2\026\uffc2\041\uffc2\053\uffc2\001\002\000" +
    "\026\005\uffc3\007\uffc3\010\uffc3\011\uffc3\013\uffc3\016\uffc3" +
    "\021\uffc3\026\uffc3\041\uffc3\053\uffc3\001\002\000\026\005" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\013\uffc4\016\uffc4\021\uffc4" +
    "\026\uffc4\041\uffc4\053\uffc4\001\002\000\004\052\152\001" +
    "\002\000\024\005\uffc7\007\uffc7\010\uffc7\011\uffc7\013\uffc7" +
    "\021\uffc7\026\uffc7\041\uffc7\053\uffc7\001\002\000\004\054" +
    "\154\001\002\000\020\005\uffd2\011\uffd2\013\uffd2\021\uffd2" +
    "\026\uffd2\041\uffd2\053\uffd2\001\002\000\004\016\156\001" +
    "\002\000\004\052\157\001\002\000\004\016\160\001\002" +
    "\000\004\052\161\001\002\000\004\016\162\001\002\000" +
    "\004\054\163\001\002\000\020\005\uffd7\011\uffd7\013\uffd7" +
    "\021\uffd7\026\uffd7\041\uffd7\053\uffd7\001\002\000\004\016" +
    "\165\001\002\000\004\052\166\001\002\000\004\016\167" +
    "\001\002\000\004\052\170\001\002\000\020\005\uffd0\011" +
    "\uffd0\013\uffd0\021\uffd0\026\uffd0\041\uffd0\053\uffd0\001\002" +
    "\000\006\005\172\011\173\001\002\000\024\005\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\013\uffd9\021\uffd9\026\uffd9\041\uffd9" +
    "\053\uffd9\001\002\000\004\054\174\001\002\000\020\005" +
    "\uffd1\011\uffd1\013\uffd1\021\uffd1\026\uffd1\041\uffd1\053\uffd1" +
    "\001\002\000\024\005\uffcf\007\uffcf\010\uffcf\011\uffcf\013" +
    "\uffcf\021\uffcf\026\uffcf\041\uffcf\053\uffcf\001\002\000\004" +
    "\016\177\001\002\000\004\054\200\001\002\000\020\005" +
    "\uffd6\011\uffd6\013\uffd6\021\uffd6\026\uffd6\041\uffd6\053\uffd6" +
    "\001\002\000\004\004\206\001\002\000\004\004\203\001" +
    "\002\000\046\004\131\006\111\017\112\025\135\026\050" +
    "\027\134\033\114\037\121\040\107\041\053\043\122\044" +
    "\113\045\115\046\117\047\137\051\127\052\124\053\051" +
    "\001\002\000\006\005\205\011\173\001\002\000\024\005" +
    "\uffda\007\uffda\010\uffda\011\uffda\013\uffda\021\uffda\026\uffda" +
    "\041\uffda\053\uffda\001\002\000\046\004\131\006\111\017" +
    "\112\025\135\026\050\027\134\033\114\037\121\040\107" +
    "\041\053\043\122\044\113\045\115\046\117\047\137\051" +
    "\127\052\124\053\051\001\002\000\006\005\210\011\173" +
    "\001\002\000\024\005\uffdb\007\uffdb\010\uffdb\011\uffdb\013" +
    "\uffdb\021\uffdb\026\uffdb\041\uffdb\053\uffdb\001\002\000\024" +
    "\005\uffca\007\uffca\010\uffca\011\uffca\013\uffca\021\uffca\026" +
    "\uffca\041\uffca\053\uffca\001\002\000\024\005\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\013\uffcc\021\uffcc\026\uffcc\041\uffcc\053" +
    "\uffcc\001\002\000\004\017\112\001\002\000\022\005\uffd5" +
    "\011\uffd5\013\uffd5\016\uffd5\021\uffd5\026\uffd5\041\uffd5\053" +
    "\uffd5\001\002\000\024\005\uffce\007\uffce\010\uffce\011\uffce" +
    "\013\uffce\021\uffce\026\uffce\041\uffce\053\uffce\001\002\000" +
    "\024\005\uffc9\007\uffc9\010\uffc9\011\uffc9\013\uffc9\021\uffc9" +
    "\026\uffc9\041\uffc9\053\uffc9\001\002\000\004\016\220\001" +
    "\002\000\004\052\221\001\002\000\004\016\222\001\002" +
    "\000\004\052\223\001\002\000\004\016\224\001\002\000" +
    "\004\054\225\001\002\000\020\005\uffd8\011\uffd8\013\uffd8" +
    "\021\uffd8\026\uffd8\041\uffd8\053\uffd8\001\002\000\004\016" +
    "\227\001\002\000\010\026\050\041\053\053\051\001\002" +
    "\000\022\005\uffdd\011\uffdd\013\uffdd\016\231\021\uffdd\026" +
    "\uffdd\041\uffdd\053\uffdd\001\002\000\006\007\060\010\061" +
    "\001\002\000\020\005\uffdc\011\uffdc\013\uffdc\021\uffdc\026" +
    "\uffdc\041\uffdc\053\uffdc\001\002\000\006\011\173\013\234" +
    "\001\002\000\004\052\235\001\002\000\004\020\236\001" +
    "\002\000\022\005\uffd3\011\uffd3\013\uffd3\016\uffd3\021\uffd3" +
    "\026\uffd3\041\uffd3\053\uffd3\001\002\000\004\016\240\001" +
    "\002\000\010\026\050\041\053\053\051\001\002\000\020" +
    "\005\uffde\011\uffde\013\uffde\021\uffde\026\uffde\041\uffde\053" +
    "\uffde\001\002\000\024\005\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\013\uffcb\021\uffcb\026\uffcb\041\uffcb\053\uffcb\001\002\000" +
    "\004\022\276\001\002\000\004\021\ufffd\001\002\000\004" +
    "\022\274\001\002\000\004\022\272\001\002\000\022\015" +
    "\uffb8\023\243\024\252\030\254\036\245\042\246\057\244" +
    "\060\250\001\002\000\004\021\ufffc\001\002\000\004\021" +
    "\uffb3\001\002\000\006\026\263\041\264\001\002\000\004" +
    "\015\262\001\002\000\004\022\260\001\002\000\004\021" +
    "\uffb1\001\002\000\004\021\257\001\002\000\022\015\uffb7" +
    "\023\uffb7\024\uffb7\030\uffb7\036\uffb7\042\uffb7\057\uffb7\060" +
    "\uffb7\001\002\000\004\052\261\001\002\000\004\021\uffb4" +
    "\001\002\000\004\034\uffbb\001\002\000\004\022\267\001" +
    "\002\000\004\022\265\001\002\000\004\052\266\001\002" +
    "\000\004\021\uffb0\001\002\000\004\052\270\001\002\000" +
    "\004\021\uffaf\001\002\000\004\015\uffb9\001\002\000\006" +
    "\055\100\056\102\001\002\000\004\021\uffb5\001\002\000" +
    "\004\052\275\001\002\000\004\021\uffb6\001\002\000\004" +
    "\052\277\001\002\000\004\021\uffb2\001\002\000\004\021" +
    "\301\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\006\002\005\003\003\001\001\000\010\004" +
    "\012\043\013\044\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\034\007\033\001\001\000\006\005\022\014\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\032\014\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\252\011\255\012\246\013\254\046\250\001\001\000" +
    "\004\015\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\067\017\070\020\066\032\065\001\001\000" +
    "\006\033\043\034\042\001\001\000\002\001\001\000\006" +
    "\033\044\034\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\046\035\051\001\001\000\004\041\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\072\020\066\032\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\021\124" +
    "\022\131\023\107\024\132\025\105\026\122\027\125\030" +
    "\137\031\115\032\135\036\117\037\127\001\001\000\004" +
    "\047\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\040\140\042" +
    "\241\001\001\000\002\001\001\000\004\040\236\001\001" +
    "\000\032\021\232\022\131\023\107\024\132\025\105\026" +
    "\122\027\125\030\137\031\115\032\135\036\117\037\127" +
    "\001\001\000\004\040\225\001\001\000\002\001\001\000" +
    "\006\040\140\042\215\001\001\000\002\001\001\000\006" +
    "\040\140\042\214\001\001\000\002\001\001\000\006\040" +
    "\140\042\211\001\001\000\006\040\140\042\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\174\001\001" +
    "\000\032\021\170\022\131\023\107\024\132\025\105\026" +
    "\122\027\125\030\137\031\115\032\135\036\117\037\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\140" +
    "\042\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\021\203\022\131\023\107" +
    "\024\132\025\105\026\122\027\125\030\137\031\115\032" +
    "\135\036\117\037\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\021\206\022\131\023\107\024\132\025" +
    "\105\026\122\027\125\030\137\031\115\032\135\036\117" +
    "\037\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\227\001\001\000\002" +
    "\001\001\000\004\041\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\270\011\255\012\246\013\254\046\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxAnalysis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxAnalysis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxAnalysis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxAnalysis$actions {



    public CashFlow flujo = new CashFlow();
    MARRManager marr = new MARRManager();
    String inflacion = "0%";
    String name = "";
    public FinancialPlanning plan = new FinancialPlanning();

  private final SintaxAnalysis parser;

  /** Constructor */
  CUP$SintaxAnalysis$actions(SintaxAnalysis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxAnalysis$do_action(
    int                        CUP$SintaxAnalysis$act_num,
    java_cup.runtime.lr_parser CUP$SintaxAnalysis$parser,
    java.util.Stack            CUP$SintaxAnalysis$stack,
    int                        CUP$SintaxAnalysis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxAnalysis$result;

      /* select the action based on the action number */
      switch (CUP$SintaxAnalysis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LAST_INFO ::= LAST COSTS EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setLasYearCosts(n); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LAST_INFO",9, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LAST_INFO ::= LAST REVENUE EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setLastYearRevenue(n);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LAST_INFO",9, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INFO_OPTION ::= LAST_INFO 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INFO_OPTION ::= ASSETS EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setAssets(n);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INFO_OPTION ::= TYPE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setType(t);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INFO_OPTION ::= START EQUALS NUMBER 
            {
              Object RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double N = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setStart(N.intValue()); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INFO_OPTION ::= PATENT EQUALS BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setCommerce(b); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INFO_OPTION ::= FIRST EQUALS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 flujo.setInvestment(n); 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_OPTION",7, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INFO_LINE ::= INFO_OPTION SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_LINE",8, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INFO_BODY ::= INFO_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_BODY",6, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INFO_BODY ::= INFO_LINE INFO_BODY 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_BODY",6, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INFO_HEADER ::= INFO OPCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_HEADER",5, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INFO_PART ::= INFO_HEADER INFO_BODY CLCURLYBRAC 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INFO_PART",4, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MARR_PARAM ::= PERCENTAGE COMMA PERCENTAGE SEMICOLON 
            {
              MARRStructure RESULT =null;
		int riskleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).left;
		int riskright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).right;
		String risk = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).value;
		int percentageleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int percentageright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		String percentage = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		 
   RESULT = new MARRStructure(percentage, inflacion, risk);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_PARAM",35, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MARR_LINE ::= IDENTIFIER POINTER MARR_PARAM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		MARRStructure m = (MARRStructure)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 marr.addInvestor(i,m);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_LINE",10, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MARR_BODY ::= MARR_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_BODY",3, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MARR_BODY ::= MARR_LINE MARR_BODY 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_BODY",3, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MARR_HEADER ::= MARR PERCENTAGE OPCURLYBRAC 
            {
              MARRManager RESULT =null;
		int percentageleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int percentageright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		String percentage = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
    RESULT = new MARRManager(percentage);
    inflacion = percentage;
    marr = RESULT;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_HEADER",34, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MARR_PART ::= MARR_HEADER MARR_BODY CLCURLYBRAC 
            {
              MARRManager RESULT =null;
		
 flujo.setMarr(marr);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("MARR_PART",33, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NUM_LIST ::= NUMBER CLSQBRAC 
            {
              ArrayList<Double> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
    RESULT = new ArrayList<>();
    RESULT.add(n);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("NUM_LIST",30, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NUM_LIST ::= NUMBER COMMA NUM_LIST 
            {
              ArrayList<Double> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new ArrayList<>();
    RESULT.add(n);
    RESULT.addAll(li);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("NUM_LIST",30, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NUM_LIST ::= OPSQBRAC NUM_LIST 
            {
              ArrayList<Double> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = li;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("NUM_LIST",30, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INCREASE ::= MINUS PERCENTAGE 
            {
              Double RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		RESULT =-1 * Statistics.percentageFromString(pe);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INCREASE",31, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INCREASE ::= PLUS PERCENTAGE 
            {
              Double RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		RESULT = Statistics.percentageFromString(pe);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INCREASE",31, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // P_OPTIONS ::= NUM_LIST COMMA NUMBER 
            {
              ModelManager RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new ModelManager(li);
    RESULT.setFixedConfidence(n.intValue());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("P_OPTIONS",32, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // P_OPTIONS ::= NUM_LIST 
            {
              ModelManager RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new ModelManager(li);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("P_OPTIONS",32, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PROGNOSTICS ::= MINIMUM P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.MINIMUM,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",29, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PROGNOSTICS ::= PROGNOSTIC P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.PUNTUAL,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",29, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PROGNOSTICS ::= INFMIN P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.MINIMUM_LOWER,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",29, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PROGNOSTICS ::= INF P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.LOWER_LIMIT,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",29, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PROGNOSTICS ::= UPPER_MIN P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.MINIMUM_UPPER,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",29, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PROGNOSTICS ::= UPPER P_OPTIONS 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		ModelManager p = (ModelManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.UPPER_LIMIT,0.); 

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",29, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PROGNOSTICS ::= PROGNOSTICS INCREASE 
            {
              PrognosticManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		PrognosticManager p = (PrognosticManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double in = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PrognosticManager(p.getPattern(), p.getConfidence(), p.getOption(), in);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PROGNOSTICS",29, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STAIR ::= TIERED PERCENTAGE COMMA NUMBER COMMA NUMBER 
            {
              FinancialDataManager RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new TieredValuesManager(pe, n.intValue(), flujo.getStart()+1, n2);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("STAIR",16, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PERCENT ::= INSTRUCTION TIMES PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		FinancialDataManager in = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PercentageManager(pe, in);
    RESULT.setRelated(in.getRelated());
    RESULT.setName(in.getName());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PERCENT",17, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PERCENT ::= FIND TIMES PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PercentageManager(pe,i);
    RESULT.setRelated(i.getName());


              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("PERCENT",17, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LIMIT_PART ::= OPSQBRAC INSTRUCTION POLKADOT NUMBER CLSQBRAC 
            {
              FinancialDataManager RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).right;
		FinancialDataManager I = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
    RESULT = I;
    RESULT.setLimit( n.intValue(), 0);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LIMIT_PART",21, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LIMIT ::= LIMIT_PART 
            {
              PeriodicalManager RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager li = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new PeriodicalManager();
    RESULT.addManager(li, li.getLimit());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LIMIT",28, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LIMIT ::= LIMIT COMMA LIMIT_PART 
            {
              PeriodicalManager RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		PeriodicalManager r = (PeriodicalManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager li = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = r;
    RESULT.addManager(li, li.getLimit());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("LIMIT",28, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DEPRECIATION ::= DEPRECIATE NUMBER COMMA PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new DepreciationManager(pe,num);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("DEPRECIATION",18, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INTERESTS ::= GERMAN NUMBER COMMA NUMBER COMMA NUMBER COMMA PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).right;
		Double A = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		Double P = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int Jleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int Jright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		Double J = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int PEleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int PEright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String PE = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT= new FeeManager(A, P.intValue(), J.intValue(), PE ,Options.GERMAN);;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INTERESTS",19, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INTERESTS ::= FRENCH NUMBER COMMA NUMBER COMMA NUMBER COMMA PERCENTAGE 
            {
              FinancialDataManager RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).right;
		Double A = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-6)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		Double P = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int Jleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int Jright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		Double J = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int PEleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int PEright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String PE = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT=new FeeManager(A, P.intValue(), J.intValue(), PE ,Options.FRENCH);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INTERESTS",19, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERATE ::= OPBRAC INSTRUCTION CLBRAC 
            {
              FinancialDataManager RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		 RESULT = i; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPERATE",20, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERATE ::= OPERATE MINUS OPBRAC INSTRUCTION CLBRAC 
            {
              FinancialDataManager RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		FinancialDataManager op = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
   RESULT = new ArithmeticalManager(Options.SUBSTRACT, op.getValues(), i);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPERATE",20, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERATE ::= OPERATE PLUS OPBRAC INSTRUCTION CLBRAC 
            {
              FinancialDataManager RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		FinancialDataManager op = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
    RESULT = new ArithmeticalManager(Options.ADD, op.getValues(), i);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPERATE",20, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPTIM ::= OPTIMIZER NUM_LIST COMMA FIND COMMA INCREASE 
            {
              FinancialDataManager RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		FinancialDataManager id = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double i = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new Optimizer(li, id, i);
    RESULT.setRelated(id.getName());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPTIM",23, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPTIM ::= OPTIMIZER NUM_LIST COMMA FIND 
            {
              FinancialDataManager RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		ArrayList<Double> li = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager id = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new Optimizer(li, id, 0.0);
    RESULT.setRelated(id.getName());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("OPTIM",23, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AVER ::= AVERAGE NUM_LIST COMMA FIND 
            {
              FinancialDataManager RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		ArrayList<Double> n = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager id = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new AverageManager(id,n);
    RESULT.setRelated(id.getName());

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("AVER",22, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCTION ::= OPTIM 
            {
              FinancialDataManager RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager op = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		RESULT = op;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTRUCTION ::= AVER 
            {
              FinancialDataManager RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager av = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		RESULT = av;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCTION ::= OPERATE 
            {
              FinancialDataManager RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager op = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = op; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCTION ::= NUMBER 
            {
              FinancialDataManager RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = new FlatValuesManager(num, 10);
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCTION ::= INTERESTS 
            {
              FinancialDataManager RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager in = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = in; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCTION ::= DEPRECIATION 
            {
              FinancialDataManager RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager d = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = d; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCTION ::= LIMIT 
            {
              FinancialDataManager RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		PeriodicalManager l = (PeriodicalManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = l; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCTION ::= PROGNOSTICS 
            {
              FinancialDataManager RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		PrognosticManager p = (PrognosticManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = p; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCTION ::= STAIR 
            {
              FinancialDataManager RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager s = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT = s; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCTION ::= PERCENT 
            {
              FinancialDataManager RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager I = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		 RESULT= I; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ID_PART ::= ID_PART OPSQBRAC BOOL COMMA BOOL CLSQBRAC 
            {
              FinancialDataManager RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)).right;
		FinancialDataManager I = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).right;
		Boolean fa = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).value;
		int shleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int shright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Boolean sh = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
            RESULT = new FinancialDataManager();
            RESULT.setName(I.getName());
            RESULT.setHasBill(fa);
            RESULT.setIsShield(sh);
        
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("ID_PART",14, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ID_PART ::= FIND 
            {
              FinancialDataManager RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager n = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
            RESULT = n;
        
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("ID_PART",14, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COSTS_LINE ::= ID_PART EQUALS INSTRUCTION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		FinancialDataManager in = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
                in.setHasBill(i.hasBill());
                in.setIsShield(i.isShield());
                in.setName(i.getName());
                if(in.isAsset())
                    flujo.AddAsset(i.getName(), (DepreciationManager)(in));
                else
                    flujo.AddOutlay(i.getName(), in);
              
              
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_LINE",13, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COSTS_LINE ::= COSTS_LINE SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_LINE",13, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COSTS_BODY ::= COSTS_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_BODY",12, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COSTS_BODY ::= COSTS_BODY COSTS_LINE 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_BODY",12, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COSTS_PART ::= OUTLAY COSTS_BODY POLKADOT OUTLAY 
            {
              Object RESULT =null;
		
    flujo.Optimize();
    plan.addCashFlow(name,flujo);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("COSTS_PART",11, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FIND ::= COSTS 
            {
              FinancialDataManager RESULT =null;
		RESULT = flujo.getCosts();
 RESULT.setName("costos");
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("FIND",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FIND ::= REVENUE 
            {
              FinancialDataManager RESULT =null;
		
RESULT = flujo.getRevenue();
RESULT.setName("ingresos");
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("FIND",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FIND ::= IDENTIFIER 
            {
              FinancialDataManager RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = flujo.getOutLay(id);
    if(RESULT == null)
    {
        RESULT = new FinancialDataManager();
      
    }   
    RESULT.setName(id);  


              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("FIND",24, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SCENARIO_LINE ::= FIND INCREASE 
            {
              HashMap<String,Double> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double in = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = new HashMap<>();
    RESULT.put(i.getName(), in);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("SCENARIO_LINE",27, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SCENARIO_LINE ::= SCENARIO_LINE FIND INCREASE 
            {
              HashMap<String,Double> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		HashMap<String,Double> l = (HashMap<String,Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		FinancialDataManager i = (FinancialDataManager)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		Double in = (Double)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
		
    RESULT = l;
    RESULT.put(i.getName(), in);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("SCENARIO_LINE",27, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SCENARIO_LINE ::= SCENARIO_LINE SEMICOLON 
            {
              HashMap<String,Double> RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		HashMap<String,Double> L = (HashMap<String,Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		
    RESULT = L;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("SCENARIO_LINE",27, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SCENARIO_BODY ::= SCENARIO IDENTIFIER SCENARIO_LINE POLKADOT SCENARIO 
            {
              FinancialDataManager RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		HashMap<String,Double> l = (HashMap<String,Double>)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;
		
    plan.createScenario(l,id);

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("SCENARIO_BODY",26, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SCENARIO_PART ::= SCENARIO_BODY 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("SCENARIO_PART",25, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SCENARIO_PART ::= SCENARIO_BODY SCENARIO_PART 
            {
              FinancialDataManager RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("SCENARIO_PART",25, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY_PART ::= MARR_PART INFO_PART COSTS_PART SCENARIO_PART 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BODY_PART",2, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // HEADER_PART ::= FLOW IDENTIFIER NT$0 OPCURLYBRAC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-2)).value;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("HEADER_PART",1, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.peek()).value;
 name = i;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("NT$0",38, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TYPE ::= NET 
            {
              Integer RESULT =null;
		RESULT = CashFlow.NET;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("TYPE",36, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TYPE ::= GROSS 
            {
              Integer RESULT =null;
		RESULT = CashFlow.GROSS; 
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("TYPE",36, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BOOL ::= NO 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BOOL",37, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BOOL ::= YES 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("BOOL",37, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // FILE ::= HEADER_PART BODY_PART CLCURLYBRAC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("FILE",0, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          return CUP$SintaxAnalysis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= FILE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)).value;
		RESULT = start_val;
              CUP$SintaxAnalysis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.elementAt(CUP$SintaxAnalysis$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxAnalysis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxAnalysis$parser.done_parsing();
          return CUP$SintaxAnalysis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

