package DynasT.Analysis.Classes;


import finansyx.commons.*;
import finansyx.commons.CashFlow.*;
import finansyx.commons.Manage.*;
import finansyx.commons.Prognostication.ModelManager;
import finansyx.commons.Rules.Options;
import java.util.*;

action code {:

    public CashFlow flujo = new CashFlow();
    MARRManager marr = new MARRManager();
    String inflacion = "0%";
:}

parser code {:

:}

terminal OPBRAC,CLBRAC, AVERAGE, PLUS, MINUS, TIMES, POINTER, POLKADOT, OPCURLYBRAC, CLCURLYBRAC, COMMA , OPSQBRAC, 
CLSQBRAC, SEMICOLON, EQUALS, ASSETS, LAST, GERMAN, COSTS, TIERED, START,
SCENARIO, FLOW, FRENCH, OUTLAY, INFO, FIRST, INF, INFMIN, REVENUE, PATENT, PROGNOSTIC, OPTIMIZER, MINIMUM,
UPPER, UPPER_MIN, MARR, DEPRECIATE;
terminal Double NUMBER;
terminal String IDENTIFIER, PERCENTAGE;
terminal Boolean YES, NO;
terminal Integer GROSS, NET;

non terminal FILE, HEADER_PART, BODY_PART;
non terminal MARR_BODY, INFO_PART, INFO_HEADER, INFO_BODY, INFO_OPTION,INFO_LINE, LAST_INFO, MARR_LINE,
COSTS_PART, COSTS_BODY, COSTS_LINE;

non terminal FinancialDataManager ID_PART, INSTRUCTION, STAIR,PERCENT, DEPRECIATION,
INTERESTS, OPERATE, LIMIT_PART, AVER, OPTIM, FIND, SCENARIO_PART, SCENARIO_LINE, SCENARIO_BODY;
non terminal PeriodicalManager LIMIT;
non terminal PrognosticManager PROGNOSTICS;
non terminal ArrayList<Double> NUM_LIST;
non terminal Double INCREASE;
non terminal ModelManager P_OPTIONS;
non terminal MARRManager MARR_PART, MARR_HEADER;
non terminal MARRStructure MARR_PARAM;
non terminal Integer  TYPE;
non terminal Boolean BOOL;
start with FILE;

FILE ::= HEADER_PART BODY_PART CLCURLYBRAC SEMICOLON;

BOOL ::= YES{:RESULT = true;:} | NO {:RESULT = false;:};
TYPE ::= GROSS {:RESULT = CashFlow.GROSS; :} | NET{:RESULT = CashFlow.NET;:};

HEADER_PART ::=  FLOW IDENTIFIER OPCURLYBRAC;
BODY_PART ::= MARR_PART INFO_PART COSTS_PART SCENARIO_PART;
SCENARIO_PART ::= SCENARIO_BODY SCENARIO_PART | SCENARIO_BODY;
SCENARIO_BODY ::= SCENARIO IDENTIFIER SCENARIO_LINE POLKADOT SCENARIO;
SCENARIO_LINE ::= SCENARIO_LINE SEMICOLON 
|SCENARIO_LINE FIND INCREASE 
| FIND INCREASE ;
FIND ::= IDENTIFIER:id
{:
    RESULT = flujo.getOutLay(id);
    if(RESULT == null)
    {
        RESULT = new FinancialDataManager();
        RESULT.setName(id);
    }   
        
:} | REVENUE{:
RESULT = flujo.getRevenue();
RESULT.setName("ingresos");:} 
| COSTS{:RESULT = flujo.getCosts();
 RESULT.setName("costos");:};

COSTS_PART ::= OUTLAY COSTS_BODY POLKADOT OUTLAY
{:
    System.out.println("hola");
    flujo.Optimize();
:};

COSTS_BODY ::= COSTS_BODY COSTS_LINE | COSTS_LINE;

COSTS_LINE ::= 
              COSTS_LINE SEMICOLON 
            | ID_PART:i  EQUALS INSTRUCTION:in 
              {:
                in.setHasBill(i.hasBill());
                in.setIsShield(i.isShield());
                if(in.isAsset())
                    flujo.AddAsset(i.getName(), (DepreciationManager)(in));
                else
                    flujo.AddOutlay(i.getName(), in);
              :};

ID_PART ::= 
        FIND:n 
        {:
            RESULT = n;
        :}

      | ID_PART:I OPSQBRAC BOOL:fa COMMA BOOL:sh CLSQBRAC 
        {:
            RESULT = new FinancialDataManager();
            RESULT.setName(I.getName());
            RESULT.setHasBill(fa);
            RESULT.setIsShield(sh);
        :};

INSTRUCTION ::= PERCENT:I {: RESULT= I; :} 
              | STAIR:s {: RESULT = s; :}
              | PROGNOSTICS:p {: RESULT = p; :}
              | LIMIT:l {: RESULT = l; :}
              | DEPRECIATION:d {: RESULT = d; :}
              | INTERESTS:in {: RESULT = in; :} 
              | NUMBER:num {: RESULT = new FlatValuesManager(num, 10);:}
              | OPERATE:op {: RESULT = op; :}
              | AVER:av {:RESULT = av;:}
              | OPTIM:op {:RESULT = op;:};
AVER ::= AVERAGE NUM_LIST:n COMMA FIND:id
{:
    RESULT = new AverageManager(id,n);
:};

OPTIM ::= OPTIMIZER NUM_LIST:li COMMA FIND:id
{:
    RESULT = new Optimizer(li, id, 0.0);
:}
| OPTIMIZER NUM_LIST:li COMMA FIND:id COMMA INCREASE:i
{:
    RESULT = new Optimizer(li, id, i);
:};
OPERATE ::= OPERATE:op PLUS OPBRAC INSTRUCTION:i CLBRAC
{:
    RESULT = new ArithmeticalManager(Options.ADD, op.getValues(), i);
:}
| OPERATE:op MINUS OPBRAC INSTRUCTION:i CLBRAC
{:
   RESULT = new ArithmeticalManager(Options.SUBSTRACT, op.getValues(), i);
:} 
| 
OPBRAC INSTRUCTION:i CLBRAC
{: RESULT = i; :};

INTERESTS ::= FRENCH NUMBER:A COMMA NUMBER:P COMMA NUMBER:J COMMA PERCENTAGE:PE 
{:
    RESULT=new FeeManager(A, P.intValue(), J.intValue(), PE ,Options.FRENCH);
:}
          |   GERMAN NUMBER:A COMMA NUMBER:P COMMA NUMBER:J COMMA PERCENTAGE:PE
{:
    RESULT= new FeeManager(A, P.intValue(), J.intValue(), PE ,Options.GERMAN);;
:}; 

DEPRECIATION ::= DEPRECIATE NUMBER:num COMMA PERCENTAGE:pe
{:
    RESULT = new DepreciationManager(pe,num);
:};

LIMIT ::= LIMIT:r COMMA LIMIT_PART:li
{:
    RESULT = r;
    RESULT.addManager(li, li.getLimit());
:} 

| LIMIT_PART:li 
{:
    RESULT = new PeriodicalManager();
    RESULT.addManager(li, li.getLimit());
:};

LIMIT_PART ::= OPSQBRAC INSTRUCTION:I POLKADOT NUMBER:n CLSQBRAC
{:
    RESULT = I;
    RESULT.setLimit( n.intValue(), 0);
:};

PERCENT ::= FIND:i TIMES PERCENTAGE:pe
{:
    RESULT = new PercentageManager(pe,i);
:}
| INSTRUCTION:in TIMES PERCENTAGE:pe
{:
    RESULT = new PercentageManager(pe, in);
:};

STAIR ::= TIERED PERCENTAGE:pe COMMA NUMBER:n COMMA NUMBER:n2
{:
    RESULT = new TieredValuesManager(pe, n.intValue(), flujo.getStart()+1, n2);
:};

PROGNOSTICS ::= PROGNOSTICS:p INCREASE:in 
{:
    RESULT = new PrognosticManager(p.getPattern(), p.getConfidence(), p.getOption(), in);
:}
| UPPER P_OPTIONS:p
{:
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.UPPER_LIMIT,0.); 
:}
| UPPER_MIN P_OPTIONS:p
{:
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.MINIMUM_UPPER,0.); 
:}
| INF P_OPTIONS:p
{:
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.LOWER_LIMIT,0.); 
:} 
| INFMIN P_OPTIONS:p
{:
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.MINIMUM_LOWER,0.); 
:}
| PROGNOSTIC P_OPTIONS:p
{:
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.PUNTUAL,0.); 
:}
| MINIMUM P_OPTIONS:p
{:
    RESULT = new PrognosticManager(p.getPattern(),p.getFixedConfidence(),Options.MINIMUM,0.); 
:};

P_OPTIONS ::=  NUM_LIST:li
{:
    RESULT = new ModelManager(li);
:}
| NUM_LIST:li COMMA NUMBER:n 
{:
    RESULT = new ModelManager(li);
    RESULT.setFixedConfidence(n.intValue());
:};

INCREASE ::= PLUS PERCENTAGE:pe {:RESULT = Statistics.percentageFromString(pe);:} 
           | MINUS PERCENTAGE:pe {:RESULT =-1 * Statistics.percentageFromString(pe);:};

NUM_LIST ::= OPSQBRAC NUM_LIST:li
{:
    RESULT = li;
:}
| NUMBER:n COMMA NUM_LIST:li
{:
    RESULT = new ArrayList<>();
    RESULT.add(n);
    RESULT.addAll(li);
:}
| NUMBER:n CLSQBRAC
{:
    RESULT = new ArrayList<>();
    RESULT.add(n);
:};

MARR_PART ::= MARR_HEADER MARR_BODY CLCURLYBRAC
{:
 flujo.setMarr(marr);
:};

MARR_HEADER ::= MARR PERCENTAGE:percentage OPCURLYBRAC 
{:
    RESULT = new MARRManager(percentage);
    inflacion = percentage;
    marr = RESULT;
:}; 
MARR_BODY ::= MARR_LINE MARR_BODY| MARR_LINE;
MARR_LINE ::= IDENTIFIER:i POINTER MARR_PARAM:m {: marr.addInvestor(i,m);:};
MARR_PARAM ::= PERCENTAGE:risk COMMA PERCENTAGE:percentage SEMICOLON 
{: 
   RESULT = new MARRStructure(percentage, inflacion, risk);
:};

INFO_PART ::= INFO_HEADER INFO_BODY CLCURLYBRAC;
INFO_HEADER ::= INFO OPCURLYBRAC;
INFO_BODY ::= INFO_LINE INFO_BODY | INFO_LINE;
INFO_LINE ::= INFO_OPTION SEMICOLON;
INFO_OPTION ::= FIRST EQUALS NUMBER:n {: flujo.setInvestment(n); :} 
              | PATENT EQUALS BOOL:b {: flujo.setCommerce(b); :}
              | START EQUALS NUMBER:N {: flujo.setStart(N.intValue()); :}
              | TYPE:t {: flujo.setType(t);:} 
              | ASSETS EQUALS NUMBER:n {: flujo.setAssets(n);:} 
              | LAST_INFO;
LAST_INFO ::= LAST REVENUE EQUALS NUMBER:n {: flujo.setLastYearRevenue(n);:} 
            | LAST COSTS EQUALS NUMBER:n {: flujo.setLasYearCosts(n); :};


